{"version":3,"file":"index.umd.js","sources":["../index.js"],"sourcesContent":["let browserSupportsTextareaTextNodes;\n\n/**\n * @param {HTMLElement} input\n * @return {boolean}\n */\nfunction canManipulateViaTextNodes(input) {\n  if (input.nodeName !== \"TEXTAREA\") {\n    return false;\n  }\n  if (typeof browserSupportsTextareaTextNodes === \"undefined\") {\n    const textarea = document.createElement(\"textarea\");\n    textarea.value = 1;\n    browserSupportsTextareaTextNodes = !!textarea.firstChild;\n  }\n  return browserSupportsTextareaTextNodes;\n}\n\n/**\n * @param {HTMLTextAreaElement|HTMLInputElement} input\n * @param {string} text\n * @returns {void}\n */\nexport default function(input, text) {\n  // Most of the used APIs only work with the field selected\n  input.focus();\n\n  // IE 8-10\n  if (document.selection) {\n    const ieRange = document.selection.createRange();\n    ieRange.text = text;\n\n    // Move cursor after the inserted text\n    ieRange.collapse(false /* to the end */);\n    ieRange.select();\n\n    return;\n  }\n\n  // Webkit + Edge\n  const isSuccess = document.execCommand(\"insertText\", false, text);\n  if (!isSuccess) {\n    const start = input.selectionStart;\n    const end = input.selectionEnd;\n    // Firefox (non-standard method)\n    if (typeof input.setRangeText === \"function\") {\n      input.setRangeText(text);\n    } else {\n      // To make a change we just need a Range, not a Selection\n      const range = document.createRange();\n      const textNode = document.createTextNode(text);\n\n      if (canManipulateViaTextNodes(input)) {\n        let node = input.firstChild;\n\n        // If textarea is empty, just insert the text\n        if (!node) {\n          input.appendChild(textNode);\n        } else {\n          // Otherwise we need to find a nodes for start and end\n          let offset = 0;\n          let startNode = null;\n          let endNode = null;\n\n          while (node && (startNode === null || endNode === null)) {\n            const nodeLength = node.nodeValue.length;\n\n            // if start of the selection falls into current node\n            if (start >= offset && start <= offset + nodeLength) {\n              range.setStart((startNode = node), start - offset);\n            }\n\n            // if end of the selection falls into current node\n            if (end >= offset && end <= offset + nodeLength) {\n              range.setEnd((endNode = node), end - offset);\n            }\n\n            offset += nodeLength;\n            node = node.nextSibling;\n          }\n\n          // If there is some text selected, remove it as we should replace it\n          if (start !== end) {\n            range.deleteContents();\n          }\n        }\n      }\n\n      // If the node is a textarea and the range doesn't span outside the element\n      //\n      // Get the commonAncestorContainer of the selected range and test its type\n      // If the node is of type `#text` it means that we're still working with text nodes within our textarea element\n      // otherwise, if it's of type `#document` for example it means our selection spans outside the textarea.\n      if (\n        canManipulateViaTextNodes(input) &&\n        range.commonAncestorContainer.nodeName === \"#text\"\n      ) {\n        // Finally insert a new node. The browser will automatically split start and end nodes into two if necessary\n        range.insertNode(textNode);\n      } else {\n        // If the node is not a textarea or the range spans outside a textarea the only way is to replace the whole value\n        const value = input.value;\n        input.value = value.slice(0, start) + text + value.slice(end);\n      }\n    }\n\n    // Correct the cursor position to be at the end of the insertion\n    input.setSelectionRange(start + text.length, start + text.length);\n\n    // Notify any possible listeners of the change\n    const e = document.createEvent(\"UIEvent\");\n    e.initEvent(\"input\", true, false);\n    input.dispatchEvent(e);\n  }\n}\n"],"names":["browserSupportsTextareaTextNodes","canManipulateViaTextNodes","input","nodeName","textarea","document","createElement","value","firstChild","text","focus","selection","ieRange","createRange","collapse","select","isSuccess","execCommand","start","selectionStart","end","selectionEnd","setRangeText","range","textNode","createTextNode","node","appendChild","offset","startNode","endNode","nodeLength","nodeValue","length","setStart","setEnd","nextSibling","deleteContents","commonAncestorContainer","insertNode","slice","setSelectionRange","e","createEvent","initEvent","dispatchEvent"],"mappings":"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"}