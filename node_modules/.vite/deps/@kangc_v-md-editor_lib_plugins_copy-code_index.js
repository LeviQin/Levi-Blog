import {
  require_interopRequireDefault
} from "./chunk-X2YVWMY6.js";
import {
  __commonJS
} from "./chunk-S5KM4IGW.js";

// node_modules/@kangc/v-md-editor/lib/utils/markdown-it-copy-code.js
var require_markdown_it_copy_code = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/utils/markdown-it-copy-code.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = _default;
    function _default(md) {
      var fence = md.renderer.rules.fence;
      md.renderer.rules.fence = function() {
        var rawCode = fence.apply(void 0, arguments);
        var button = '\n    <button class="v-md-copy-code-btn" type="button">\n      <i>\n        <svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true">\n          <path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path>\n        </svg>\n      </i>\n    </button>';
        var finalCode = rawCode.replace("<!--beforeend-->", button + "<!--beforeend-->").replace("v-md-pre-wrapper", "v-md-pre-wrapper copy-code-mode");
        return finalCode;
      };
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/copy-code/parser.js
var require_parser = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/copy-code/parser.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = _default;
    var _markdownItCopyCode = _interopRequireDefault(require_markdown_it_copy_code());
    function _default(vMdParser) {
      vMdParser.extendMarkdown(function(mdParser) {
        mdParser.use(_markdownItCopyCode.default);
      });
    }
  }
});

// node_modules/toggle-selection/index.js
var require_toggle_selection = __commonJS({
  "node_modules/toggle-selection/index.js"(exports, module) {
    module.exports = function() {
      var selection = document.getSelection();
      if (!selection.rangeCount) {
        return function() {
        };
      }
      var active = document.activeElement;
      var ranges = [];
      for (var i = 0; i < selection.rangeCount; i++) {
        ranges.push(selection.getRangeAt(i));
      }
      switch (active.tagName.toUpperCase()) {
        case "INPUT":
        case "TEXTAREA":
          active.blur();
          break;
        default:
          active = null;
          break;
      }
      selection.removeAllRanges();
      return function() {
        selection.type === "Caret" && selection.removeAllRanges();
        if (!selection.rangeCount) {
          ranges.forEach(function(range) {
            selection.addRange(range);
          });
        }
        active && active.focus();
      };
    };
  }
});

// node_modules/copy-to-clipboard/index.js
var require_copy_to_clipboard = __commonJS({
  "node_modules/copy-to-clipboard/index.js"(exports, module) {
    "use strict";
    var deselectCurrent = require_toggle_selection();
    var clipboardToIE11Formatting = {
      "text/plain": "Text",
      "text/html": "Url",
      "default": "Text"
    };
    var defaultMessage = "Copy to clipboard: #{key}, Enter";
    function format(message) {
      var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
      return message.replace(/#{\s*key\s*}/g, copyKey);
    }
    function copy(text, options) {
      var debug, message, reselectPrevious, range, selection, mark, success = false;
      if (!options) {
        options = {};
      }
      debug = options.debug || false;
      try {
        reselectPrevious = deselectCurrent();
        range = document.createRange();
        selection = document.getSelection();
        mark = document.createElement("span");
        mark.textContent = text;
        mark.ariaHidden = "true";
        mark.style.all = "unset";
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        mark.style.whiteSpace = "pre";
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e) {
          e.stopPropagation();
          if (options.format) {
            e.preventDefault();
            if (typeof e.clipboardData === "undefined") {
              debug && console.warn("unable to use e.clipboardData");
              debug && console.warn("trying IE specific stuff");
              window.clipboardData.clearData();
              var format2 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
              window.clipboardData.setData(format2, text);
            } else {
              e.clipboardData.clearData();
              e.clipboardData.setData(options.format, text);
            }
          }
          if (options.onCopy) {
            e.preventDefault();
            options.onCopy(e.clipboardData);
          }
        });
        document.body.appendChild(mark);
        range.selectNodeContents(mark);
        selection.addRange(range);
        var successful = document.execCommand("copy");
        if (!successful) {
          throw new Error("copy command was unsuccessful");
        }
        success = true;
      } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(options.format || "text", text);
          options.onCopy && options.onCopy(window.clipboardData);
          success = true;
        } catch (err2) {
          debug && console.error("unable to copy using clipboardData: ", err2);
          debug && console.error("falling back to prompt");
          message = format("message" in options ? options.message : defaultMessage);
          window.prompt(message, text);
        }
      } finally {
        if (selection) {
          if (typeof selection.removeRange == "function") {
            selection.removeRange(range);
          } else {
            selection.removeAllRanges();
          }
        }
        if (mark) {
          document.body.removeChild(mark);
        }
        reselectPrevious();
      }
      return success;
    }
    module.exports = copy;
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/copy-code/preview.js
var require_preview = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/copy-code/preview.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = createCopyCodePreview;
    var _copyToClipboard = _interopRequireDefault(require_copy_to_clipboard());
    function isCopyButton(el) {
      return el.classList.contains("v-md-copy-code-btn");
    }
    function findCodeWrapperEl(el) {
      if (el.classList.contains("v-md-pre-wrapper")) {
        return el;
      }
      return findCodeWrapperEl(el.parentNode);
    }
    function getPreviewEl(el) {
      var previewElClass = "v-md-editor-preview";
      return el.classList.contains(previewElClass) ? el : el.querySelector("." + previewElClass);
    }
    function createCopyCodePreview() {
      return {
        install: function install(VMdEditor) {
          if (!VMdEditor.mixins)
            VMdEditor.mixins = [];
          VMdEditor.mixins.push({
            emits: ["copy-code-success"],
            mounted: function mounted() {
              var _this = this;
              this.$nextTick(function() {
                var previewEl = getPreviewEl(_this.$el);
                previewEl.addEventListener("click", _this.handleCopyCodeClick);
              });
            },
            beforeUnmount: function beforeUnmount() {
              var previewEl = getPreviewEl(this.$el);
              previewEl.removeEventListener("click", this.handleCopyCodeClick);
            },
            methods: {
              handleCopyCodeClick: function handleCopyCodeClick(_ref) {
                var target = _ref.target;
                if (isCopyButton(target)) {
                  var codeWrapper = findCodeWrapperEl(target.parentNode);
                  if (codeWrapper) {
                    var code = codeWrapper.querySelector("code").innerText;
                    (0, _copyToClipboard.default)(code);
                    this.$emit("copy-code-success", code);
                  }
                }
              }
            }
          });
        }
      };
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/copy-code/index.js
var require_copy_code = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/copy-code/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = createCopyCodePlugin;
    var _parser = _interopRequireDefault(require_parser());
    var _preview = _interopRequireDefault(require_preview());
    function createCopyCodePlugin() {
      return {
        install: function install(VMdEditor) {
          VMdEditor.vMdParser.use(_parser.default);
          VMdEditor.use((0, _preview.default)());
        }
      };
    }
  }
});

// dep:@kangc_v-md-editor_lib_plugins_copy-code_index
var kangc_v_md_editor_lib_plugins_copy_code_index_default = require_copy_code();
export {
  kangc_v_md_editor_lib_plugins_copy_code_index_default as default
};
//# sourceMappingURL=@kangc_v-md-editor_lib_plugins_copy-code_index.js.map
