{
  "version": 3,
  "sources": ["../../hammerjs/hammer.js", "dep:hammerjs"],
  "sourcesContent": ["/*! Hammer.JS - v2.0.7 - 2016-04-22\r\n * http://hammerjs.github.io/\r\n *\r\n * Copyright (c) 2016 Jorik Tangelder;\r\n * Licensed under the MIT license */\r\n(function(window, document, exportName, undefined) {\r\n  'use strict';\r\n\r\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\r\nvar TEST_ELEMENT = document.createElement('div');\r\n\r\nvar TYPE_FUNCTION = 'function';\r\n\r\nvar round = Math.round;\r\nvar abs = Math.abs;\r\nvar now = Date.now;\r\n\r\n/**\r\n * set a timeout with a given scope\r\n * @param {Function} fn\r\n * @param {Number} timeout\r\n * @param {Object} context\r\n * @returns {number}\r\n */\r\nfunction setTimeoutContext(fn, timeout, context) {\r\n    return setTimeout(bindFn(fn, context), timeout);\r\n}\r\n\r\n/**\r\n * if the argument is an array, we want to execute the fn on each entry\r\n * if it aint an array we don't want to do a thing.\r\n * this is used by all the methods that accept a single and array argument.\r\n * @param {*|Array} arg\r\n * @param {String} fn\r\n * @param {Object} [context]\r\n * @returns {Boolean}\r\n */\r\nfunction invokeArrayArg(arg, fn, context) {\r\n    if (Array.isArray(arg)) {\r\n        each(arg, context[fn], context);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * walk objects and arrays\r\n * @param {Object} obj\r\n * @param {Function} iterator\r\n * @param {Object} context\r\n */\r\nfunction each(obj, iterator, context) {\r\n    var i;\r\n\r\n    if (!obj) {\r\n        return;\r\n    }\r\n\r\n    if (obj.forEach) {\r\n        obj.forEach(iterator, context);\r\n    } else if (obj.length !== undefined) {\r\n        i = 0;\r\n        while (i < obj.length) {\r\n            iterator.call(context, obj[i], i, obj);\r\n            i++;\r\n        }\r\n    } else {\r\n        for (i in obj) {\r\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * wrap a method with a deprecation warning and stack trace\r\n * @param {Function} method\r\n * @param {String} name\r\n * @param {String} message\r\n * @returns {Function} A new function wrapping the supplied method.\r\n */\r\nfunction deprecate(method, name, message) {\r\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\r\n    return function() {\r\n        var e = new Error('get-stack-trace');\r\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\r\n            .replace(/^\\s+at\\s+/gm, '')\r\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\r\n\r\n        var log = window.console && (window.console.warn || window.console.log);\r\n        if (log) {\r\n            log.call(window.console, deprecationMessage, stack);\r\n        }\r\n        return method.apply(this, arguments);\r\n    };\r\n}\r\n\r\n/**\r\n * extend object.\r\n * means that properties in dest will be overwritten by the ones in src.\r\n * @param {Object} target\r\n * @param {...Object} objects_to_assign\r\n * @returns {Object} target\r\n */\r\nvar assign;\r\nif (typeof Object.assign !== 'function') {\r\n    assign = function assign(target) {\r\n        if (target === undefined || target === null) {\r\n            throw new TypeError('Cannot convert undefined or null to object');\r\n        }\r\n\r\n        var output = Object(target);\r\n        for (var index = 1; index < arguments.length; index++) {\r\n            var source = arguments[index];\r\n            if (source !== undefined && source !== null) {\r\n                for (var nextKey in source) {\r\n                    if (source.hasOwnProperty(nextKey)) {\r\n                        output[nextKey] = source[nextKey];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    };\r\n} else {\r\n    assign = Object.assign;\r\n}\r\n\r\n/**\r\n * extend object.\r\n * means that properties in dest will be overwritten by the ones in src.\r\n * @param {Object} dest\r\n * @param {Object} src\r\n * @param {Boolean} [merge=false]\r\n * @returns {Object} dest\r\n */\r\nvar extend = deprecate(function extend(dest, src, merge) {\r\n    var keys = Object.keys(src);\r\n    var i = 0;\r\n    while (i < keys.length) {\r\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\r\n            dest[keys[i]] = src[keys[i]];\r\n        }\r\n        i++;\r\n    }\r\n    return dest;\r\n}, 'extend', 'Use `assign`.');\r\n\r\n/**\r\n * merge the values from src in the dest.\r\n * means that properties that exist in dest will not be overwritten by src\r\n * @param {Object} dest\r\n * @param {Object} src\r\n * @returns {Object} dest\r\n */\r\nvar merge = deprecate(function merge(dest, src) {\r\n    return extend(dest, src, true);\r\n}, 'merge', 'Use `assign`.');\r\n\r\n/**\r\n * simple class inheritance\r\n * @param {Function} child\r\n * @param {Function} base\r\n * @param {Object} [properties]\r\n */\r\nfunction inherit(child, base, properties) {\r\n    var baseP = base.prototype,\r\n        childP;\r\n\r\n    childP = child.prototype = Object.create(baseP);\r\n    childP.constructor = child;\r\n    childP._super = baseP;\r\n\r\n    if (properties) {\r\n        assign(childP, properties);\r\n    }\r\n}\r\n\r\n/**\r\n * simple function bind\r\n * @param {Function} fn\r\n * @param {Object} context\r\n * @returns {Function}\r\n */\r\nfunction bindFn(fn, context) {\r\n    return function boundFn() {\r\n        return fn.apply(context, arguments);\r\n    };\r\n}\r\n\r\n/**\r\n * let a boolean value also be a function that must return a boolean\r\n * this first item in args will be used as the context\r\n * @param {Boolean|Function} val\r\n * @param {Array} [args]\r\n * @returns {Boolean}\r\n */\r\nfunction boolOrFn(val, args) {\r\n    if (typeof val == TYPE_FUNCTION) {\r\n        return val.apply(args ? args[0] || undefined : undefined, args);\r\n    }\r\n    return val;\r\n}\r\n\r\n/**\r\n * use the val2 when val1 is undefined\r\n * @param {*} val1\r\n * @param {*} val2\r\n * @returns {*}\r\n */\r\nfunction ifUndefined(val1, val2) {\r\n    return (val1 === undefined) ? val2 : val1;\r\n}\r\n\r\n/**\r\n * addEventListener with multiple events at once\r\n * @param {EventTarget} target\r\n * @param {String} types\r\n * @param {Function} handler\r\n */\r\nfunction addEventListeners(target, types, handler) {\r\n    each(splitStr(types), function(type) {\r\n        target.addEventListener(type, handler, false);\r\n    });\r\n}\r\n\r\n/**\r\n * removeEventListener with multiple events at once\r\n * @param {EventTarget} target\r\n * @param {String} types\r\n * @param {Function} handler\r\n */\r\nfunction removeEventListeners(target, types, handler) {\r\n    each(splitStr(types), function(type) {\r\n        target.removeEventListener(type, handler, false);\r\n    });\r\n}\r\n\r\n/**\r\n * find if a node is in the given parent\r\n * @method hasParent\r\n * @param {HTMLElement} node\r\n * @param {HTMLElement} parent\r\n * @return {Boolean} found\r\n */\r\nfunction hasParent(node, parent) {\r\n    while (node) {\r\n        if (node == parent) {\r\n            return true;\r\n        }\r\n        node = node.parentNode;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * small indexOf wrapper\r\n * @param {String} str\r\n * @param {String} find\r\n * @returns {Boolean} found\r\n */\r\nfunction inStr(str, find) {\r\n    return str.indexOf(find) > -1;\r\n}\r\n\r\n/**\r\n * split string on whitespace\r\n * @param {String} str\r\n * @returns {Array} words\r\n */\r\nfunction splitStr(str) {\r\n    return str.trim().split(/\\s+/g);\r\n}\r\n\r\n/**\r\n * find if a array contains the object using indexOf or a simple polyFill\r\n * @param {Array} src\r\n * @param {String} find\r\n * @param {String} [findByKey]\r\n * @return {Boolean|Number} false when not found, or the index\r\n */\r\nfunction inArray(src, find, findByKey) {\r\n    if (src.indexOf && !findByKey) {\r\n        return src.indexOf(find);\r\n    } else {\r\n        var i = 0;\r\n        while (i < src.length) {\r\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\r\n                return i;\r\n            }\r\n            i++;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * convert array-like objects to real arrays\r\n * @param {Object} obj\r\n * @returns {Array}\r\n */\r\nfunction toArray(obj) {\r\n    return Array.prototype.slice.call(obj, 0);\r\n}\r\n\r\n/**\r\n * unique array with objects based on a key (like 'id') or just by the array's value\r\n * @param {Array} src [{id:1},{id:2},{id:1}]\r\n * @param {String} [key]\r\n * @param {Boolean} [sort=False]\r\n * @returns {Array} [{id:1},{id:2}]\r\n */\r\nfunction uniqueArray(src, key, sort) {\r\n    var results = [];\r\n    var values = [];\r\n    var i = 0;\r\n\r\n    while (i < src.length) {\r\n        var val = key ? src[i][key] : src[i];\r\n        if (inArray(values, val) < 0) {\r\n            results.push(src[i]);\r\n        }\r\n        values[i] = val;\r\n        i++;\r\n    }\r\n\r\n    if (sort) {\r\n        if (!key) {\r\n            results = results.sort();\r\n        } else {\r\n            results = results.sort(function sortUniqueArray(a, b) {\r\n                return a[key] > b[key];\r\n            });\r\n        }\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n/**\r\n * get the prefixed property\r\n * @param {Object} obj\r\n * @param {String} property\r\n * @returns {String|Undefined} prefixed\r\n */\r\nfunction prefixed(obj, property) {\r\n    var prefix, prop;\r\n    var camelProp = property[0].toUpperCase() + property.slice(1);\r\n\r\n    var i = 0;\r\n    while (i < VENDOR_PREFIXES.length) {\r\n        prefix = VENDOR_PREFIXES[i];\r\n        prop = (prefix) ? prefix + camelProp : property;\r\n\r\n        if (prop in obj) {\r\n            return prop;\r\n        }\r\n        i++;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * get a unique id\r\n * @returns {number} uniqueId\r\n */\r\nvar _uniqueId = 1;\r\nfunction uniqueId() {\r\n    return _uniqueId++;\r\n}\r\n\r\n/**\r\n * get the window object of an element\r\n * @param {HTMLElement} element\r\n * @returns {DocumentView|Window}\r\n */\r\nfunction getWindowForElement(element) {\r\n    var doc = element.ownerDocument || element;\r\n    return (doc.defaultView || doc.parentWindow || window);\r\n}\r\n\r\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\r\n\r\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\r\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\r\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\r\n\r\nvar INPUT_TYPE_TOUCH = 'touch';\r\nvar INPUT_TYPE_PEN = 'pen';\r\nvar INPUT_TYPE_MOUSE = 'mouse';\r\nvar INPUT_TYPE_KINECT = 'kinect';\r\n\r\nvar COMPUTE_INTERVAL = 25;\r\n\r\nvar INPUT_START = 1;\r\nvar INPUT_MOVE = 2;\r\nvar INPUT_END = 4;\r\nvar INPUT_CANCEL = 8;\r\n\r\nvar DIRECTION_NONE = 1;\r\nvar DIRECTION_LEFT = 2;\r\nvar DIRECTION_RIGHT = 4;\r\nvar DIRECTION_UP = 8;\r\nvar DIRECTION_DOWN = 16;\r\n\r\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\r\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\r\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\r\n\r\nvar PROPS_XY = ['x', 'y'];\r\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\r\n\r\n/**\r\n * create new input type manager\r\n * @param {Manager} manager\r\n * @param {Function} callback\r\n * @returns {Input}\r\n * @constructor\r\n */\r\nfunction Input(manager, callback) {\r\n    var self = this;\r\n    this.manager = manager;\r\n    this.callback = callback;\r\n    this.element = manager.element;\r\n    this.target = manager.options.inputTarget;\r\n\r\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\r\n    // so when disabled the input events are completely bypassed.\r\n    this.domHandler = function(ev) {\r\n        if (boolOrFn(manager.options.enable, [manager])) {\r\n            self.handler(ev);\r\n        }\r\n    };\r\n\r\n    this.init();\r\n\r\n}\r\n\r\nInput.prototype = {\r\n    /**\r\n     * should handle the inputEvent data and trigger the callback\r\n     * @virtual\r\n     */\r\n    handler: function() { },\r\n\r\n    /**\r\n     * bind the events\r\n     */\r\n    init: function() {\r\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\r\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\r\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\r\n    },\r\n\r\n    /**\r\n     * unbind the events\r\n     */\r\n    destroy: function() {\r\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\r\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\r\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\r\n    }\r\n};\r\n\r\n/**\r\n * create new input type manager\r\n * called by the Manager constructor\r\n * @param {Hammer} manager\r\n * @returns {Input}\r\n */\r\nfunction createInputInstance(manager) {\r\n    var Type;\r\n    var inputClass = manager.options.inputClass;\r\n\r\n    if (inputClass) {\r\n        Type = inputClass;\r\n    } else if (SUPPORT_POINTER_EVENTS) {\r\n        Type = PointerEventInput;\r\n    } else if (SUPPORT_ONLY_TOUCH) {\r\n        Type = TouchInput;\r\n    } else if (!SUPPORT_TOUCH) {\r\n        Type = MouseInput;\r\n    } else {\r\n        Type = TouchMouseInput;\r\n    }\r\n    return new (Type)(manager, inputHandler);\r\n}\r\n\r\n/**\r\n * handle input events\r\n * @param {Manager} manager\r\n * @param {String} eventType\r\n * @param {Object} input\r\n */\r\nfunction inputHandler(manager, eventType, input) {\r\n    var pointersLen = input.pointers.length;\r\n    var changedPointersLen = input.changedPointers.length;\r\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\r\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\r\n\r\n    input.isFirst = !!isFirst;\r\n    input.isFinal = !!isFinal;\r\n\r\n    if (isFirst) {\r\n        manager.session = {};\r\n    }\r\n\r\n    // source event is the normalized value of the domEvents\r\n    // like 'touchstart, mouseup, pointerdown'\r\n    input.eventType = eventType;\r\n\r\n    // compute scale, rotation etc\r\n    computeInputData(manager, input);\r\n\r\n    // emit secret event\r\n    manager.emit('hammer.input', input);\r\n\r\n    manager.recognize(input);\r\n    manager.session.prevInput = input;\r\n}\r\n\r\n/**\r\n * extend the data with some usable properties like scale, rotate, velocity etc\r\n * @param {Object} manager\r\n * @param {Object} input\r\n */\r\nfunction computeInputData(manager, input) {\r\n    var session = manager.session;\r\n    var pointers = input.pointers;\r\n    var pointersLength = pointers.length;\r\n\r\n    // store the first input to calculate the distance and direction\r\n    if (!session.firstInput) {\r\n        session.firstInput = simpleCloneInputData(input);\r\n    }\r\n\r\n    // to compute scale and rotation we need to store the multiple touches\r\n    if (pointersLength > 1 && !session.firstMultiple) {\r\n        session.firstMultiple = simpleCloneInputData(input);\r\n    } else if (pointersLength === 1) {\r\n        session.firstMultiple = false;\r\n    }\r\n\r\n    var firstInput = session.firstInput;\r\n    var firstMultiple = session.firstMultiple;\r\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\r\n\r\n    var center = input.center = getCenter(pointers);\r\n    input.timeStamp = now();\r\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\r\n\r\n    input.angle = getAngle(offsetCenter, center);\r\n    input.distance = getDistance(offsetCenter, center);\r\n\r\n    computeDeltaXY(session, input);\r\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\r\n\r\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\r\n    input.overallVelocityX = overallVelocity.x;\r\n    input.overallVelocityY = overallVelocity.y;\r\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\r\n\r\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\r\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\r\n\r\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\r\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\r\n\r\n    computeIntervalInputData(session, input);\r\n\r\n    // find the correct target\r\n    var target = manager.element;\r\n    if (hasParent(input.srcEvent.target, target)) {\r\n        target = input.srcEvent.target;\r\n    }\r\n    input.target = target;\r\n}\r\n\r\nfunction computeDeltaXY(session, input) {\r\n    var center = input.center;\r\n    var offset = session.offsetDelta || {};\r\n    var prevDelta = session.prevDelta || {};\r\n    var prevInput = session.prevInput || {};\r\n\r\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\r\n        prevDelta = session.prevDelta = {\r\n            x: prevInput.deltaX || 0,\r\n            y: prevInput.deltaY || 0\r\n        };\r\n\r\n        offset = session.offsetDelta = {\r\n            x: center.x,\r\n            y: center.y\r\n        };\r\n    }\r\n\r\n    input.deltaX = prevDelta.x + (center.x - offset.x);\r\n    input.deltaY = prevDelta.y + (center.y - offset.y);\r\n}\r\n\r\n/**\r\n * velocity is calculated every x ms\r\n * @param {Object} session\r\n * @param {Object} input\r\n */\r\nfunction computeIntervalInputData(session, input) {\r\n    var last = session.lastInterval || input,\r\n        deltaTime = input.timeStamp - last.timeStamp,\r\n        velocity, velocityX, velocityY, direction;\r\n\r\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\r\n        var deltaX = input.deltaX - last.deltaX;\r\n        var deltaY = input.deltaY - last.deltaY;\r\n\r\n        var v = getVelocity(deltaTime, deltaX, deltaY);\r\n        velocityX = v.x;\r\n        velocityY = v.y;\r\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\r\n        direction = getDirection(deltaX, deltaY);\r\n\r\n        session.lastInterval = input;\r\n    } else {\r\n        // use latest velocity info if it doesn't overtake a minimum period\r\n        velocity = last.velocity;\r\n        velocityX = last.velocityX;\r\n        velocityY = last.velocityY;\r\n        direction = last.direction;\r\n    }\r\n\r\n    input.velocity = velocity;\r\n    input.velocityX = velocityX;\r\n    input.velocityY = velocityY;\r\n    input.direction = direction;\r\n}\r\n\r\n/**\r\n * create a simple clone from the input used for storage of firstInput and firstMultiple\r\n * @param {Object} input\r\n * @returns {Object} clonedInputData\r\n */\r\nfunction simpleCloneInputData(input) {\r\n    // make a simple copy of the pointers because we will get a reference if we don't\r\n    // we only need clientXY for the calculations\r\n    var pointers = [];\r\n    var i = 0;\r\n    while (i < input.pointers.length) {\r\n        pointers[i] = {\r\n            clientX: round(input.pointers[i].clientX),\r\n            clientY: round(input.pointers[i].clientY)\r\n        };\r\n        i++;\r\n    }\r\n\r\n    return {\r\n        timeStamp: now(),\r\n        pointers: pointers,\r\n        center: getCenter(pointers),\r\n        deltaX: input.deltaX,\r\n        deltaY: input.deltaY\r\n    };\r\n}\r\n\r\n/**\r\n * get the center of all the pointers\r\n * @param {Array} pointers\r\n * @return {Object} center contains `x` and `y` properties\r\n */\r\nfunction getCenter(pointers) {\r\n    var pointersLength = pointers.length;\r\n\r\n    // no need to loop when only one touch\r\n    if (pointersLength === 1) {\r\n        return {\r\n            x: round(pointers[0].clientX),\r\n            y: round(pointers[0].clientY)\r\n        };\r\n    }\r\n\r\n    var x = 0, y = 0, i = 0;\r\n    while (i < pointersLength) {\r\n        x += pointers[i].clientX;\r\n        y += pointers[i].clientY;\r\n        i++;\r\n    }\r\n\r\n    return {\r\n        x: round(x / pointersLength),\r\n        y: round(y / pointersLength)\r\n    };\r\n}\r\n\r\n/**\r\n * calculate the velocity between two points. unit is in px per ms.\r\n * @param {Number} deltaTime\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Object} velocity `x` and `y`\r\n */\r\nfunction getVelocity(deltaTime, x, y) {\r\n    return {\r\n        x: x / deltaTime || 0,\r\n        y: y / deltaTime || 0\r\n    };\r\n}\r\n\r\n/**\r\n * get the direction between two points\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Number} direction\r\n */\r\nfunction getDirection(x, y) {\r\n    if (x === y) {\r\n        return DIRECTION_NONE;\r\n    }\r\n\r\n    if (abs(x) >= abs(y)) {\r\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n    }\r\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\r\n}\r\n\r\n/**\r\n * calculate the absolute distance between two points\r\n * @param {Object} p1 {x, y}\r\n * @param {Object} p2 {x, y}\r\n * @param {Array} [props] containing x and y keys\r\n * @return {Number} distance\r\n */\r\nfunction getDistance(p1, p2, props) {\r\n    if (!props) {\r\n        props = PROPS_XY;\r\n    }\r\n    var x = p2[props[0]] - p1[props[0]],\r\n        y = p2[props[1]] - p1[props[1]];\r\n\r\n    return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * calculate the angle between two coordinates\r\n * @param {Object} p1\r\n * @param {Object} p2\r\n * @param {Array} [props] containing x and y keys\r\n * @return {Number} angle\r\n */\r\nfunction getAngle(p1, p2, props) {\r\n    if (!props) {\r\n        props = PROPS_XY;\r\n    }\r\n    var x = p2[props[0]] - p1[props[0]],\r\n        y = p2[props[1]] - p1[props[1]];\r\n    return Math.atan2(y, x) * 180 / Math.PI;\r\n}\r\n\r\n/**\r\n * calculate the rotation degrees between two pointersets\r\n * @param {Array} start array of pointers\r\n * @param {Array} end array of pointers\r\n * @return {Number} rotation\r\n */\r\nfunction getRotation(start, end) {\r\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\r\n}\r\n\r\n/**\r\n * calculate the scale factor between two pointersets\r\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\r\n * @param {Array} start array of pointers\r\n * @param {Array} end array of pointers\r\n * @return {Number} scale\r\n */\r\nfunction getScale(start, end) {\r\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\r\n}\r\n\r\nvar MOUSE_INPUT_MAP = {\r\n    mousedown: INPUT_START,\r\n    mousemove: INPUT_MOVE,\r\n    mouseup: INPUT_END\r\n};\r\n\r\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\r\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\r\n\r\n/**\r\n * Mouse events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction MouseInput() {\r\n    this.evEl = MOUSE_ELEMENT_EVENTS;\r\n    this.evWin = MOUSE_WINDOW_EVENTS;\r\n\r\n    this.pressed = false; // mousedown state\r\n\r\n    Input.apply(this, arguments);\r\n}\r\n\r\ninherit(MouseInput, Input, {\r\n    /**\r\n     * handle mouse events\r\n     * @param {Object} ev\r\n     */\r\n    handler: function MEhandler(ev) {\r\n        var eventType = MOUSE_INPUT_MAP[ev.type];\r\n\r\n        // on start we want to have the left mouse button down\r\n        if (eventType & INPUT_START && ev.button === 0) {\r\n            this.pressed = true;\r\n        }\r\n\r\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\r\n            eventType = INPUT_END;\r\n        }\r\n\r\n        // mouse must be down\r\n        if (!this.pressed) {\r\n            return;\r\n        }\r\n\r\n        if (eventType & INPUT_END) {\r\n            this.pressed = false;\r\n        }\r\n\r\n        this.callback(this.manager, eventType, {\r\n            pointers: [ev],\r\n            changedPointers: [ev],\r\n            pointerType: INPUT_TYPE_MOUSE,\r\n            srcEvent: ev\r\n        });\r\n    }\r\n});\r\n\r\nvar POINTER_INPUT_MAP = {\r\n    pointerdown: INPUT_START,\r\n    pointermove: INPUT_MOVE,\r\n    pointerup: INPUT_END,\r\n    pointercancel: INPUT_CANCEL,\r\n    pointerout: INPUT_CANCEL\r\n};\r\n\r\n// in IE10 the pointer types is defined as an enum\r\nvar IE10_POINTER_TYPE_ENUM = {\r\n    2: INPUT_TYPE_TOUCH,\r\n    3: INPUT_TYPE_PEN,\r\n    4: INPUT_TYPE_MOUSE,\r\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\r\n};\r\n\r\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\r\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\r\n\r\n// IE10 has prefixed support, and case-sensitive\r\nif (window.MSPointerEvent && !window.PointerEvent) {\r\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\r\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\r\n}\r\n\r\n/**\r\n * Pointer events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction PointerEventInput() {\r\n    this.evEl = POINTER_ELEMENT_EVENTS;\r\n    this.evWin = POINTER_WINDOW_EVENTS;\r\n\r\n    Input.apply(this, arguments);\r\n\r\n    this.store = (this.manager.session.pointerEvents = []);\r\n}\r\n\r\ninherit(PointerEventInput, Input, {\r\n    /**\r\n     * handle mouse events\r\n     * @param {Object} ev\r\n     */\r\n    handler: function PEhandler(ev) {\r\n        var store = this.store;\r\n        var removePointer = false;\r\n\r\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\r\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\r\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\r\n\r\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\r\n\r\n        // get index of the event in the store\r\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\r\n\r\n        // start and mouse must be down\r\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\r\n            if (storeIndex < 0) {\r\n                store.push(ev);\r\n                storeIndex = store.length - 1;\r\n            }\r\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\r\n            removePointer = true;\r\n        }\r\n\r\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\r\n        if (storeIndex < 0) {\r\n            return;\r\n        }\r\n\r\n        // update the event in the store\r\n        store[storeIndex] = ev;\r\n\r\n        this.callback(this.manager, eventType, {\r\n            pointers: store,\r\n            changedPointers: [ev],\r\n            pointerType: pointerType,\r\n            srcEvent: ev\r\n        });\r\n\r\n        if (removePointer) {\r\n            // remove from the store\r\n            store.splice(storeIndex, 1);\r\n        }\r\n    }\r\n});\r\n\r\nvar SINGLE_TOUCH_INPUT_MAP = {\r\n    touchstart: INPUT_START,\r\n    touchmove: INPUT_MOVE,\r\n    touchend: INPUT_END,\r\n    touchcancel: INPUT_CANCEL\r\n};\r\n\r\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\r\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\r\n\r\n/**\r\n * Touch events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction SingleTouchInput() {\r\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\r\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\r\n    this.started = false;\r\n\r\n    Input.apply(this, arguments);\r\n}\r\n\r\ninherit(SingleTouchInput, Input, {\r\n    handler: function TEhandler(ev) {\r\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\r\n\r\n        // should we handle the touch events?\r\n        if (type === INPUT_START) {\r\n            this.started = true;\r\n        }\r\n\r\n        if (!this.started) {\r\n            return;\r\n        }\r\n\r\n        var touches = normalizeSingleTouches.call(this, ev, type);\r\n\r\n        // when done, reset the started state\r\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\r\n            this.started = false;\r\n        }\r\n\r\n        this.callback(this.manager, type, {\r\n            pointers: touches[0],\r\n            changedPointers: touches[1],\r\n            pointerType: INPUT_TYPE_TOUCH,\r\n            srcEvent: ev\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * @this {TouchInput}\r\n * @param {Object} ev\r\n * @param {Number} type flag\r\n * @returns {undefined|Array} [all, changed]\r\n */\r\nfunction normalizeSingleTouches(ev, type) {\r\n    var all = toArray(ev.touches);\r\n    var changed = toArray(ev.changedTouches);\r\n\r\n    if (type & (INPUT_END | INPUT_CANCEL)) {\r\n        all = uniqueArray(all.concat(changed), 'identifier', true);\r\n    }\r\n\r\n    return [all, changed];\r\n}\r\n\r\nvar TOUCH_INPUT_MAP = {\r\n    touchstart: INPUT_START,\r\n    touchmove: INPUT_MOVE,\r\n    touchend: INPUT_END,\r\n    touchcancel: INPUT_CANCEL\r\n};\r\n\r\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\r\n\r\n/**\r\n * Multi-user touch events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction TouchInput() {\r\n    this.evTarget = TOUCH_TARGET_EVENTS;\r\n    this.targetIds = {};\r\n\r\n    Input.apply(this, arguments);\r\n}\r\n\r\ninherit(TouchInput, Input, {\r\n    handler: function MTEhandler(ev) {\r\n        var type = TOUCH_INPUT_MAP[ev.type];\r\n        var touches = getTouches.call(this, ev, type);\r\n        if (!touches) {\r\n            return;\r\n        }\r\n\r\n        this.callback(this.manager, type, {\r\n            pointers: touches[0],\r\n            changedPointers: touches[1],\r\n            pointerType: INPUT_TYPE_TOUCH,\r\n            srcEvent: ev\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * @this {TouchInput}\r\n * @param {Object} ev\r\n * @param {Number} type flag\r\n * @returns {undefined|Array} [all, changed]\r\n */\r\nfunction getTouches(ev, type) {\r\n    var allTouches = toArray(ev.touches);\r\n    var targetIds = this.targetIds;\r\n\r\n    // when there is only one touch, the process can be simplified\r\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\r\n        targetIds[allTouches[0].identifier] = true;\r\n        return [allTouches, allTouches];\r\n    }\r\n\r\n    var i,\r\n        targetTouches,\r\n        changedTouches = toArray(ev.changedTouches),\r\n        changedTargetTouches = [],\r\n        target = this.target;\r\n\r\n    // get target touches from touches\r\n    targetTouches = allTouches.filter(function(touch) {\r\n        return hasParent(touch.target, target);\r\n    });\r\n\r\n    // collect touches\r\n    if (type === INPUT_START) {\r\n        i = 0;\r\n        while (i < targetTouches.length) {\r\n            targetIds[targetTouches[i].identifier] = true;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    // filter changed touches to only contain touches that exist in the collected target ids\r\n    i = 0;\r\n    while (i < changedTouches.length) {\r\n        if (targetIds[changedTouches[i].identifier]) {\r\n            changedTargetTouches.push(changedTouches[i]);\r\n        }\r\n\r\n        // cleanup removed touches\r\n        if (type & (INPUT_END | INPUT_CANCEL)) {\r\n            delete targetIds[changedTouches[i].identifier];\r\n        }\r\n        i++;\r\n    }\r\n\r\n    if (!changedTargetTouches.length) {\r\n        return;\r\n    }\r\n\r\n    return [\r\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\r\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\r\n        changedTargetTouches\r\n    ];\r\n}\r\n\r\n/**\r\n * Combined touch and mouse input\r\n *\r\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\r\n * This because touch devices also emit mouse events while doing a touch.\r\n *\r\n * @constructor\r\n * @extends Input\r\n */\r\n\r\nvar DEDUP_TIMEOUT = 2500;\r\nvar DEDUP_DISTANCE = 25;\r\n\r\nfunction TouchMouseInput() {\r\n    Input.apply(this, arguments);\r\n\r\n    var handler = bindFn(this.handler, this);\r\n    this.touch = new TouchInput(this.manager, handler);\r\n    this.mouse = new MouseInput(this.manager, handler);\r\n\r\n    this.primaryTouch = null;\r\n    this.lastTouches = [];\r\n}\r\n\r\ninherit(TouchMouseInput, Input, {\r\n    /**\r\n     * handle mouse and touch events\r\n     * @param {Hammer} manager\r\n     * @param {String} inputEvent\r\n     * @param {Object} inputData\r\n     */\r\n    handler: function TMEhandler(manager, inputEvent, inputData) {\r\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\r\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\r\n\r\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\r\n            return;\r\n        }\r\n\r\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\r\n        if (isTouch) {\r\n            recordTouches.call(this, inputEvent, inputData);\r\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\r\n            return;\r\n        }\r\n\r\n        this.callback(manager, inputEvent, inputData);\r\n    },\r\n\r\n    /**\r\n     * remove the event listeners\r\n     */\r\n    destroy: function destroy() {\r\n        this.touch.destroy();\r\n        this.mouse.destroy();\r\n    }\r\n});\r\n\r\nfunction recordTouches(eventType, eventData) {\r\n    if (eventType & INPUT_START) {\r\n        this.primaryTouch = eventData.changedPointers[0].identifier;\r\n        setLastTouch.call(this, eventData);\r\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\r\n        setLastTouch.call(this, eventData);\r\n    }\r\n}\r\n\r\nfunction setLastTouch(eventData) {\r\n    var touch = eventData.changedPointers[0];\r\n\r\n    if (touch.identifier === this.primaryTouch) {\r\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\r\n        this.lastTouches.push(lastTouch);\r\n        var lts = this.lastTouches;\r\n        var removeLastTouch = function() {\r\n            var i = lts.indexOf(lastTouch);\r\n            if (i > -1) {\r\n                lts.splice(i, 1);\r\n            }\r\n        };\r\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\r\n    }\r\n}\r\n\r\nfunction isSyntheticEvent(eventData) {\r\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\r\n    for (var i = 0; i < this.lastTouches.length; i++) {\r\n        var t = this.lastTouches[i];\r\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\r\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\r\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\r\n\r\n// magical touchAction value\r\nvar TOUCH_ACTION_COMPUTE = 'compute';\r\nvar TOUCH_ACTION_AUTO = 'auto';\r\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\r\nvar TOUCH_ACTION_NONE = 'none';\r\nvar TOUCH_ACTION_PAN_X = 'pan-x';\r\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\r\nvar TOUCH_ACTION_MAP = getTouchActionProps();\r\n\r\n/**\r\n * Touch Action\r\n * sets the touchAction property or uses the js alternative\r\n * @param {Manager} manager\r\n * @param {String} value\r\n * @constructor\r\n */\r\nfunction TouchAction(manager, value) {\r\n    this.manager = manager;\r\n    this.set(value);\r\n}\r\n\r\nTouchAction.prototype = {\r\n    /**\r\n     * set the touchAction value on the element or enable the polyfill\r\n     * @param {String} value\r\n     */\r\n    set: function(value) {\r\n        // find out the touch-action by the event handlers\r\n        if (value == TOUCH_ACTION_COMPUTE) {\r\n            value = this.compute();\r\n        }\r\n\r\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\r\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\r\n        }\r\n        this.actions = value.toLowerCase().trim();\r\n    },\r\n\r\n    /**\r\n     * just re-set the touchAction value\r\n     */\r\n    update: function() {\r\n        this.set(this.manager.options.touchAction);\r\n    },\r\n\r\n    /**\r\n     * compute the value for the touchAction property based on the recognizer's settings\r\n     * @returns {String} value\r\n     */\r\n    compute: function() {\r\n        var actions = [];\r\n        each(this.manager.recognizers, function(recognizer) {\r\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\r\n                actions = actions.concat(recognizer.getTouchAction());\r\n            }\r\n        });\r\n        return cleanTouchActions(actions.join(' '));\r\n    },\r\n\r\n    /**\r\n     * this method is called on each input cycle and provides the preventing of the browser behavior\r\n     * @param {Object} input\r\n     */\r\n    preventDefaults: function(input) {\r\n        var srcEvent = input.srcEvent;\r\n        var direction = input.offsetDirection;\r\n\r\n        // if the touch action did prevented once this session\r\n        if (this.manager.session.prevented) {\r\n            srcEvent.preventDefault();\r\n            return;\r\n        }\r\n\r\n        var actions = this.actions;\r\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\r\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\r\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\r\n\r\n        if (hasNone) {\r\n            //do not prevent defaults if this is a tap gesture\r\n\r\n            var isTapPointer = input.pointers.length === 1;\r\n            var isTapMovement = input.distance < 2;\r\n            var isTapTouchTime = input.deltaTime < 250;\r\n\r\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (hasPanX && hasPanY) {\r\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\r\n            return;\r\n        }\r\n\r\n        if (hasNone ||\r\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\r\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\r\n            return this.preventSrc(srcEvent);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\r\n     * @param {Object} srcEvent\r\n     */\r\n    preventSrc: function(srcEvent) {\r\n        this.manager.session.prevented = true;\r\n        srcEvent.preventDefault();\r\n    }\r\n};\r\n\r\n/**\r\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\r\n * @param {String} actions\r\n * @returns {*}\r\n */\r\nfunction cleanTouchActions(actions) {\r\n    // none\r\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\r\n        return TOUCH_ACTION_NONE;\r\n    }\r\n\r\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\r\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\r\n\r\n    // if both pan-x and pan-y are set (different recognizers\r\n    // for different directions, e.g. horizontal pan but vertical swipe?)\r\n    // we need none (as otherwise with pan-x pan-y combined none of these\r\n    // recognizers will work, since the browser would handle all panning\r\n    if (hasPanX && hasPanY) {\r\n        return TOUCH_ACTION_NONE;\r\n    }\r\n\r\n    // pan-x OR pan-y\r\n    if (hasPanX || hasPanY) {\r\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\r\n    }\r\n\r\n    // manipulation\r\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\r\n        return TOUCH_ACTION_MANIPULATION;\r\n    }\r\n\r\n    return TOUCH_ACTION_AUTO;\r\n}\r\n\r\nfunction getTouchActionProps() {\r\n    if (!NATIVE_TOUCH_ACTION) {\r\n        return false;\r\n    }\r\n    var touchMap = {};\r\n    var cssSupports = window.CSS && window.CSS.supports;\r\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\r\n\r\n        // If css.supports is not supported but there is native touch-action assume it supports\r\n        // all values. This is the case for IE 10 and 11.\r\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\r\n    });\r\n    return touchMap;\r\n}\r\n\r\n/**\r\n * Recognizer flow explained; *\r\n * All recognizers have the initial state of POSSIBLE when a input session starts.\r\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\r\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\r\n *\r\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\r\n * which determines with state it should be.\r\n *\r\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\r\n * POSSIBLE to give it another change on the next cycle.\r\n *\r\n *               Possible\r\n *                  |\r\n *            +-----+---------------+\r\n *            |                     |\r\n *      +-----+-----+               |\r\n *      |           |               |\r\n *   Failed      Cancelled          |\r\n *                          +-------+------+\r\n *                          |              |\r\n *                      Recognized       Began\r\n *                                         |\r\n *                                      Changed\r\n *                                         |\r\n *                                  Ended/Recognized\r\n */\r\nvar STATE_POSSIBLE = 1;\r\nvar STATE_BEGAN = 2;\r\nvar STATE_CHANGED = 4;\r\nvar STATE_ENDED = 8;\r\nvar STATE_RECOGNIZED = STATE_ENDED;\r\nvar STATE_CANCELLED = 16;\r\nvar STATE_FAILED = 32;\r\n\r\n/**\r\n * Recognizer\r\n * Every recognizer needs to extend from this class.\r\n * @constructor\r\n * @param {Object} options\r\n */\r\nfunction Recognizer(options) {\r\n    this.options = assign({}, this.defaults, options || {});\r\n\r\n    this.id = uniqueId();\r\n\r\n    this.manager = null;\r\n\r\n    // default is enable true\r\n    this.options.enable = ifUndefined(this.options.enable, true);\r\n\r\n    this.state = STATE_POSSIBLE;\r\n\r\n    this.simultaneous = {};\r\n    this.requireFail = [];\r\n}\r\n\r\nRecognizer.prototype = {\r\n    /**\r\n     * @virtual\r\n     * @type {Object}\r\n     */\r\n    defaults: {},\r\n\r\n    /**\r\n     * set options\r\n     * @param {Object} options\r\n     * @return {Recognizer}\r\n     */\r\n    set: function(options) {\r\n        assign(this.options, options);\r\n\r\n        // also update the touchAction, in case something changed about the directions/enabled state\r\n        this.manager && this.manager.touchAction.update();\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * recognize simultaneous with an other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    recognizeWith: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\r\n            return this;\r\n        }\r\n\r\n        var simultaneous = this.simultaneous;\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        if (!simultaneous[otherRecognizer.id]) {\r\n            simultaneous[otherRecognizer.id] = otherRecognizer;\r\n            otherRecognizer.recognizeWith(this);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    dropRecognizeWith: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\r\n            return this;\r\n        }\r\n\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        delete this.simultaneous[otherRecognizer.id];\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * recognizer can only run when an other is failing\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    requireFailure: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\r\n            return this;\r\n        }\r\n\r\n        var requireFail = this.requireFail;\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        if (inArray(requireFail, otherRecognizer) === -1) {\r\n            requireFail.push(otherRecognizer);\r\n            otherRecognizer.requireFailure(this);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    dropRequireFailure: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\r\n            return this;\r\n        }\r\n\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        var index = inArray(this.requireFail, otherRecognizer);\r\n        if (index > -1) {\r\n            this.requireFail.splice(index, 1);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * has require failures boolean\r\n     * @returns {boolean}\r\n     */\r\n    hasRequireFailures: function() {\r\n        return this.requireFail.length > 0;\r\n    },\r\n\r\n    /**\r\n     * if the recognizer can recognize simultaneous with an other recognizer\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Boolean}\r\n     */\r\n    canRecognizeWith: function(otherRecognizer) {\r\n        return !!this.simultaneous[otherRecognizer.id];\r\n    },\r\n\r\n    /**\r\n     * You should use `tryEmit` instead of `emit` directly to check\r\n     * that all the needed recognizers has failed before emitting.\r\n     * @param {Object} input\r\n     */\r\n    emit: function(input) {\r\n        var self = this;\r\n        var state = this.state;\r\n\r\n        function emit(event) {\r\n            self.manager.emit(event, input);\r\n        }\r\n\r\n        // 'panstart' and 'panmove'\r\n        if (state < STATE_ENDED) {\r\n            emit(self.options.event + stateStr(state));\r\n        }\r\n\r\n        emit(self.options.event); // simple 'eventName' events\r\n\r\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\r\n            emit(input.additionalEvent);\r\n        }\r\n\r\n        // panend and pancancel\r\n        if (state >= STATE_ENDED) {\r\n            emit(self.options.event + stateStr(state));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Check that all the require failure recognizers has failed,\r\n     * if true, it emits a gesture event,\r\n     * otherwise, setup the state to FAILED.\r\n     * @param {Object} input\r\n     */\r\n    tryEmit: function(input) {\r\n        if (this.canEmit()) {\r\n            return this.emit(input);\r\n        }\r\n        // it's failing anyway\r\n        this.state = STATE_FAILED;\r\n    },\r\n\r\n    /**\r\n     * can we emit?\r\n     * @returns {boolean}\r\n     */\r\n    canEmit: function() {\r\n        var i = 0;\r\n        while (i < this.requireFail.length) {\r\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\r\n                return false;\r\n            }\r\n            i++;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * update the recognizer\r\n     * @param {Object} inputData\r\n     */\r\n    recognize: function(inputData) {\r\n        // make a new copy of the inputData\r\n        // so we can change the inputData without messing up the other recognizers\r\n        var inputDataClone = assign({}, inputData);\r\n\r\n        // is is enabled and allow recognizing?\r\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\r\n            this.reset();\r\n            this.state = STATE_FAILED;\r\n            return;\r\n        }\r\n\r\n        // reset when we've reached the end\r\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\r\n            this.state = STATE_POSSIBLE;\r\n        }\r\n\r\n        this.state = this.process(inputDataClone);\r\n\r\n        // the recognizer has recognized a gesture\r\n        // so trigger an event\r\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\r\n            this.tryEmit(inputDataClone);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * return the state of the recognizer\r\n     * the actual recognizing happens in this method\r\n     * @virtual\r\n     * @param {Object} inputData\r\n     * @returns {Const} STATE\r\n     */\r\n    process: function(inputData) { }, // jshint ignore:line\r\n\r\n    /**\r\n     * return the preferred touch-action\r\n     * @virtual\r\n     * @returns {Array}\r\n     */\r\n    getTouchAction: function() { },\r\n\r\n    /**\r\n     * called when the gesture isn't allowed to recognize\r\n     * like when another is being recognized or it is disabled\r\n     * @virtual\r\n     */\r\n    reset: function() { }\r\n};\r\n\r\n/**\r\n * get a usable string, used as event postfix\r\n * @param {Const} state\r\n * @returns {String} state\r\n */\r\nfunction stateStr(state) {\r\n    if (state & STATE_CANCELLED) {\r\n        return 'cancel';\r\n    } else if (state & STATE_ENDED) {\r\n        return 'end';\r\n    } else if (state & STATE_CHANGED) {\r\n        return 'move';\r\n    } else if (state & STATE_BEGAN) {\r\n        return 'start';\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * direction cons to string\r\n * @param {Const} direction\r\n * @returns {String}\r\n */\r\nfunction directionStr(direction) {\r\n    if (direction == DIRECTION_DOWN) {\r\n        return 'down';\r\n    } else if (direction == DIRECTION_UP) {\r\n        return 'up';\r\n    } else if (direction == DIRECTION_LEFT) {\r\n        return 'left';\r\n    } else if (direction == DIRECTION_RIGHT) {\r\n        return 'right';\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * get a recognizer by name if it is bound to a manager\r\n * @param {Recognizer|String} otherRecognizer\r\n * @param {Recognizer} recognizer\r\n * @returns {Recognizer}\r\n */\r\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\r\n    var manager = recognizer.manager;\r\n    if (manager) {\r\n        return manager.get(otherRecognizer);\r\n    }\r\n    return otherRecognizer;\r\n}\r\n\r\n/**\r\n * This recognizer is just used as a base for the simple attribute recognizers.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nfunction AttrRecognizer() {\r\n    Recognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(AttrRecognizer, Recognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof AttrRecognizer\r\n     */\r\n    defaults: {\r\n        /**\r\n         * @type {Number}\r\n         * @default 1\r\n         */\r\n        pointers: 1\r\n    },\r\n\r\n    /**\r\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\r\n     * @memberof AttrRecognizer\r\n     * @param {Object} input\r\n     * @returns {Boolean} recognized\r\n     */\r\n    attrTest: function(input) {\r\n        var optionPointers = this.options.pointers;\r\n        return optionPointers === 0 || input.pointers.length === optionPointers;\r\n    },\r\n\r\n    /**\r\n     * Process the input and return the state for the recognizer\r\n     * @memberof AttrRecognizer\r\n     * @param {Object} input\r\n     * @returns {*} State\r\n     */\r\n    process: function(input) {\r\n        var state = this.state;\r\n        var eventType = input.eventType;\r\n\r\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\r\n        var isValid = this.attrTest(input);\r\n\r\n        // on cancel input and we've recognized before, return STATE_CANCELLED\r\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\r\n            return state | STATE_CANCELLED;\r\n        } else if (isRecognized || isValid) {\r\n            if (eventType & INPUT_END) {\r\n                return state | STATE_ENDED;\r\n            } else if (!(state & STATE_BEGAN)) {\r\n                return STATE_BEGAN;\r\n            }\r\n            return state | STATE_CHANGED;\r\n        }\r\n        return STATE_FAILED;\r\n    }\r\n});\r\n\r\n/**\r\n * Pan\r\n * Recognized when the pointer is down and moved in the allowed direction.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction PanRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n\r\n    this.pX = null;\r\n    this.pY = null;\r\n}\r\n\r\ninherit(PanRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PanRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'pan',\r\n        threshold: 10,\r\n        pointers: 1,\r\n        direction: DIRECTION_ALL\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        var direction = this.options.direction;\r\n        var actions = [];\r\n        if (direction & DIRECTION_HORIZONTAL) {\r\n            actions.push(TOUCH_ACTION_PAN_Y);\r\n        }\r\n        if (direction & DIRECTION_VERTICAL) {\r\n            actions.push(TOUCH_ACTION_PAN_X);\r\n        }\r\n        return actions;\r\n    },\r\n\r\n    directionTest: function(input) {\r\n        var options = this.options;\r\n        var hasMoved = true;\r\n        var distance = input.distance;\r\n        var direction = input.direction;\r\n        var x = input.deltaX;\r\n        var y = input.deltaY;\r\n\r\n        // lock to axis?\r\n        if (!(direction & options.direction)) {\r\n            if (options.direction & DIRECTION_HORIZONTAL) {\r\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n                hasMoved = x != this.pX;\r\n                distance = Math.abs(input.deltaX);\r\n            } else {\r\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\r\n                hasMoved = y != this.pY;\r\n                distance = Math.abs(input.deltaY);\r\n            }\r\n        }\r\n        input.direction = direction;\r\n        return hasMoved && distance > options.threshold && direction & options.direction;\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\r\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\r\n    },\r\n\r\n    emit: function(input) {\r\n\r\n        this.pX = input.deltaX;\r\n        this.pY = input.deltaY;\r\n\r\n        var direction = directionStr(input.direction);\r\n\r\n        if (direction) {\r\n            input.additionalEvent = this.options.event + direction;\r\n        }\r\n        this._super.emit.call(this, input);\r\n    }\r\n});\r\n\r\n/**\r\n * Pinch\r\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction PinchRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(PinchRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PinchRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'pinch',\r\n        threshold: 0,\r\n        pointers: 2\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_NONE];\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        return this._super.attrTest.call(this, input) &&\r\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\r\n    },\r\n\r\n    emit: function(input) {\r\n        if (input.scale !== 1) {\r\n            var inOut = input.scale < 1 ? 'in' : 'out';\r\n            input.additionalEvent = this.options.event + inOut;\r\n        }\r\n        this._super.emit.call(this, input);\r\n    }\r\n});\r\n\r\n/**\r\n * Press\r\n * Recognized when the pointer is down for x ms without any movement.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nfunction PressRecognizer() {\r\n    Recognizer.apply(this, arguments);\r\n\r\n    this._timer = null;\r\n    this._input = null;\r\n}\r\n\r\ninherit(PressRecognizer, Recognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PressRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'press',\r\n        pointers: 1,\r\n        time: 251, // minimal time of the pointer to be pressed\r\n        threshold: 9 // a minimal movement is ok, but keep it low\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_AUTO];\r\n    },\r\n\r\n    process: function(input) {\r\n        var options = this.options;\r\n        var validPointers = input.pointers.length === options.pointers;\r\n        var validMovement = input.distance < options.threshold;\r\n        var validTime = input.deltaTime > options.time;\r\n\r\n        this._input = input;\r\n\r\n        // we only allow little movement\r\n        // and we've reached an end event, so a tap is possible\r\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\r\n            this.reset();\r\n        } else if (input.eventType & INPUT_START) {\r\n            this.reset();\r\n            this._timer = setTimeoutContext(function() {\r\n                this.state = STATE_RECOGNIZED;\r\n                this.tryEmit();\r\n            }, options.time, this);\r\n        } else if (input.eventType & INPUT_END) {\r\n            return STATE_RECOGNIZED;\r\n        }\r\n        return STATE_FAILED;\r\n    },\r\n\r\n    reset: function() {\r\n        clearTimeout(this._timer);\r\n    },\r\n\r\n    emit: function(input) {\r\n        if (this.state !== STATE_RECOGNIZED) {\r\n            return;\r\n        }\r\n\r\n        if (input && (input.eventType & INPUT_END)) {\r\n            this.manager.emit(this.options.event + 'up', input);\r\n        } else {\r\n            this._input.timeStamp = now();\r\n            this.manager.emit(this.options.event, this._input);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Rotate\r\n * Recognized when two or more pointer are moving in a circular motion.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction RotateRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(RotateRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof RotateRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'rotate',\r\n        threshold: 0,\r\n        pointers: 2\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_NONE];\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        return this._super.attrTest.call(this, input) &&\r\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\r\n    }\r\n});\r\n\r\n/**\r\n * Swipe\r\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction SwipeRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(SwipeRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof SwipeRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'swipe',\r\n        threshold: 10,\r\n        velocity: 0.3,\r\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\r\n        pointers: 1\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return PanRecognizer.prototype.getTouchAction.call(this);\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        var direction = this.options.direction;\r\n        var velocity;\r\n\r\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\r\n            velocity = input.overallVelocity;\r\n        } else if (direction & DIRECTION_HORIZONTAL) {\r\n            velocity = input.overallVelocityX;\r\n        } else if (direction & DIRECTION_VERTICAL) {\r\n            velocity = input.overallVelocityY;\r\n        }\r\n\r\n        return this._super.attrTest.call(this, input) &&\r\n            direction & input.offsetDirection &&\r\n            input.distance > this.options.threshold &&\r\n            input.maxPointers == this.options.pointers &&\r\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\r\n    },\r\n\r\n    emit: function(input) {\r\n        var direction = directionStr(input.offsetDirection);\r\n        if (direction) {\r\n            this.manager.emit(this.options.event + direction, input);\r\n        }\r\n\r\n        this.manager.emit(this.options.event, input);\r\n    }\r\n});\r\n\r\n/**\r\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\r\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\r\n * a single tap.\r\n *\r\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\r\n * multi-taps being recognized.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nfunction TapRecognizer() {\r\n    Recognizer.apply(this, arguments);\r\n\r\n    // previous time and center,\r\n    // used for tap counting\r\n    this.pTime = false;\r\n    this.pCenter = false;\r\n\r\n    this._timer = null;\r\n    this._input = null;\r\n    this.count = 0;\r\n}\r\n\r\ninherit(TapRecognizer, Recognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PinchRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'tap',\r\n        pointers: 1,\r\n        taps: 1,\r\n        interval: 300, // max time between the multi-tap taps\r\n        time: 250, // max time of the pointer to be down (like finger on the screen)\r\n        threshold: 9, // a minimal movement is ok, but keep it low\r\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_MANIPULATION];\r\n    },\r\n\r\n    process: function(input) {\r\n        var options = this.options;\r\n\r\n        var validPointers = input.pointers.length === options.pointers;\r\n        var validMovement = input.distance < options.threshold;\r\n        var validTouchTime = input.deltaTime < options.time;\r\n\r\n        this.reset();\r\n\r\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\r\n            return this.failTimeout();\r\n        }\r\n\r\n        // we only allow little movement\r\n        // and we've reached an end event, so a tap is possible\r\n        if (validMovement && validTouchTime && validPointers) {\r\n            if (input.eventType != INPUT_END) {\r\n                return this.failTimeout();\r\n            }\r\n\r\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\r\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\r\n\r\n            this.pTime = input.timeStamp;\r\n            this.pCenter = input.center;\r\n\r\n            if (!validMultiTap || !validInterval) {\r\n                this.count = 1;\r\n            } else {\r\n                this.count += 1;\r\n            }\r\n\r\n            this._input = input;\r\n\r\n            // if tap count matches we have recognized it,\r\n            // else it has began recognizing...\r\n            var tapCount = this.count % options.taps;\r\n            if (tapCount === 0) {\r\n                // no failing requirements, immediately trigger the tap event\r\n                // or wait as long as the multitap interval to trigger\r\n                if (!this.hasRequireFailures()) {\r\n                    return STATE_RECOGNIZED;\r\n                } else {\r\n                    this._timer = setTimeoutContext(function() {\r\n                        this.state = STATE_RECOGNIZED;\r\n                        this.tryEmit();\r\n                    }, options.interval, this);\r\n                    return STATE_BEGAN;\r\n                }\r\n            }\r\n        }\r\n        return STATE_FAILED;\r\n    },\r\n\r\n    failTimeout: function() {\r\n        this._timer = setTimeoutContext(function() {\r\n            this.state = STATE_FAILED;\r\n        }, this.options.interval, this);\r\n        return STATE_FAILED;\r\n    },\r\n\r\n    reset: function() {\r\n        clearTimeout(this._timer);\r\n    },\r\n\r\n    emit: function() {\r\n        if (this.state == STATE_RECOGNIZED) {\r\n            this._input.tapCount = this.count;\r\n            this.manager.emit(this.options.event, this._input);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Simple way to create a manager with a default set of recognizers.\r\n * @param {HTMLElement} element\r\n * @param {Object} [options]\r\n * @constructor\r\n */\r\nfunction Hammer(element, options) {\r\n    options = options || {};\r\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\r\n    return new Manager(element, options);\r\n}\r\n\r\n/**\r\n * @const {string}\r\n */\r\nHammer.VERSION = '2.0.7';\r\n\r\n/**\r\n * default settings\r\n * @namespace\r\n */\r\nHammer.defaults = {\r\n    /**\r\n     * set if DOM events are being triggered.\r\n     * But this is slower and unused by simple implementations, so disabled by default.\r\n     * @type {Boolean}\r\n     * @default false\r\n     */\r\n    domEvents: false,\r\n\r\n    /**\r\n     * The value for the touchAction property/fallback.\r\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\r\n     * @type {String}\r\n     * @default compute\r\n     */\r\n    touchAction: TOUCH_ACTION_COMPUTE,\r\n\r\n    /**\r\n     * @type {Boolean}\r\n     * @default true\r\n     */\r\n    enable: true,\r\n\r\n    /**\r\n     * EXPERIMENTAL FEATURE -- can be removed/changed\r\n     * Change the parent input target element.\r\n     * If Null, then it is being set the to main element.\r\n     * @type {Null|EventTarget}\r\n     * @default null\r\n     */\r\n    inputTarget: null,\r\n\r\n    /**\r\n     * force an input class\r\n     * @type {Null|Function}\r\n     * @default null\r\n     */\r\n    inputClass: null,\r\n\r\n    /**\r\n     * Default recognizer setup when calling `Hammer()`\r\n     * When creating a new Manager these will be skipped.\r\n     * @type {Array}\r\n     */\r\n    preset: [\r\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\r\n        [RotateRecognizer, {enable: false}],\r\n        [PinchRecognizer, {enable: false}, ['rotate']],\r\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\r\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\r\n        [TapRecognizer],\r\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\r\n        [PressRecognizer]\r\n    ],\r\n\r\n    /**\r\n     * Some CSS properties can be used to improve the working of Hammer.\r\n     * Add them to this method and they will be set when creating a new Manager.\r\n     * @namespace\r\n     */\r\n    cssProps: {\r\n        /**\r\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        userSelect: 'none',\r\n\r\n        /**\r\n         * Disable the Windows Phone grippers when pressing an element.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        touchSelect: 'none',\r\n\r\n        /**\r\n         * Disables the default callout shown when you touch and hold a touch target.\r\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\r\n         * a callout containing information about the link. This property allows you to disable that callout.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        touchCallout: 'none',\r\n\r\n        /**\r\n         * Specifies whether zooming is enabled. Used by IE10>\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        contentZooming: 'none',\r\n\r\n        /**\r\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        userDrag: 'none',\r\n\r\n        /**\r\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\r\n         * clickable element in iOS. This property obeys the alpha value, if specified.\r\n         * @type {String}\r\n         * @default 'rgba(0,0,0,0)'\r\n         */\r\n        tapHighlightColor: 'rgba(0,0,0,0)'\r\n    }\r\n};\r\n\r\nvar STOP = 1;\r\nvar FORCED_STOP = 2;\r\n\r\n/**\r\n * Manager\r\n * @param {HTMLElement} element\r\n * @param {Object} [options]\r\n * @constructor\r\n */\r\nfunction Manager(element, options) {\r\n    this.options = assign({}, Hammer.defaults, options || {});\r\n\r\n    this.options.inputTarget = this.options.inputTarget || element;\r\n\r\n    this.handlers = {};\r\n    this.session = {};\r\n    this.recognizers = [];\r\n    this.oldCssProps = {};\r\n\r\n    this.element = element;\r\n    this.input = createInputInstance(this);\r\n    this.touchAction = new TouchAction(this, this.options.touchAction);\r\n\r\n    toggleCssProps(this, true);\r\n\r\n    each(this.options.recognizers, function(item) {\r\n        var recognizer = this.add(new (item[0])(item[1]));\r\n        item[2] && recognizer.recognizeWith(item[2]);\r\n        item[3] && recognizer.requireFailure(item[3]);\r\n    }, this);\r\n}\r\n\r\nManager.prototype = {\r\n    /**\r\n     * set options\r\n     * @param {Object} options\r\n     * @returns {Manager}\r\n     */\r\n    set: function(options) {\r\n        assign(this.options, options);\r\n\r\n        // Options that need a little more setup\r\n        if (options.touchAction) {\r\n            this.touchAction.update();\r\n        }\r\n        if (options.inputTarget) {\r\n            // Clean up existing event listeners and reinitialize\r\n            this.input.destroy();\r\n            this.input.target = options.inputTarget;\r\n            this.input.init();\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * stop recognizing for this session.\r\n     * This session will be discarded, when a new [input]start event is fired.\r\n     * When forced, the recognizer cycle is stopped immediately.\r\n     * @param {Boolean} [force]\r\n     */\r\n    stop: function(force) {\r\n        this.session.stopped = force ? FORCED_STOP : STOP;\r\n    },\r\n\r\n    /**\r\n     * run the recognizers!\r\n     * called by the inputHandler function on every movement of the pointers (touches)\r\n     * it walks through all the recognizers and tries to detect the gesture that is being made\r\n     * @param {Object} inputData\r\n     */\r\n    recognize: function(inputData) {\r\n        var session = this.session;\r\n        if (session.stopped) {\r\n            return;\r\n        }\r\n\r\n        // run the touch-action polyfill\r\n        this.touchAction.preventDefaults(inputData);\r\n\r\n        var recognizer;\r\n        var recognizers = this.recognizers;\r\n\r\n        // this holds the recognizer that is being recognized.\r\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\r\n        // if no recognizer is detecting a thing, it is set to `null`\r\n        var curRecognizer = session.curRecognizer;\r\n\r\n        // reset when the last recognizer is recognized\r\n        // or when we're in a new session\r\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\r\n            curRecognizer = session.curRecognizer = null;\r\n        }\r\n\r\n        var i = 0;\r\n        while (i < recognizers.length) {\r\n            recognizer = recognizers[i];\r\n\r\n            // find out if we are allowed try to recognize the input for this one.\r\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\r\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\r\n            //      that is being recognized.\r\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\r\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\r\n            if (session.stopped !== FORCED_STOP && ( // 1\r\n                    !curRecognizer || recognizer == curRecognizer || // 2\r\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\r\n                recognizer.recognize(inputData);\r\n            } else {\r\n                recognizer.reset();\r\n            }\r\n\r\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\r\n            // current active recognizer. but only if we don't already have an active recognizer\r\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\r\n                curRecognizer = session.curRecognizer = recognizer;\r\n            }\r\n            i++;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * get a recognizer by its event name.\r\n     * @param {Recognizer|String} recognizer\r\n     * @returns {Recognizer|Null}\r\n     */\r\n    get: function(recognizer) {\r\n        if (recognizer instanceof Recognizer) {\r\n            return recognizer;\r\n        }\r\n\r\n        var recognizers = this.recognizers;\r\n        for (var i = 0; i < recognizers.length; i++) {\r\n            if (recognizers[i].options.event == recognizer) {\r\n                return recognizers[i];\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * add a recognizer to the manager\r\n     * existing recognizers with the same event name will be removed\r\n     * @param {Recognizer} recognizer\r\n     * @returns {Recognizer|Manager}\r\n     */\r\n    add: function(recognizer) {\r\n        if (invokeArrayArg(recognizer, 'add', this)) {\r\n            return this;\r\n        }\r\n\r\n        // remove existing\r\n        var existing = this.get(recognizer.options.event);\r\n        if (existing) {\r\n            this.remove(existing);\r\n        }\r\n\r\n        this.recognizers.push(recognizer);\r\n        recognizer.manager = this;\r\n\r\n        this.touchAction.update();\r\n        return recognizer;\r\n    },\r\n\r\n    /**\r\n     * remove a recognizer by name or instance\r\n     * @param {Recognizer|String} recognizer\r\n     * @returns {Manager}\r\n     */\r\n    remove: function(recognizer) {\r\n        if (invokeArrayArg(recognizer, 'remove', this)) {\r\n            return this;\r\n        }\r\n\r\n        recognizer = this.get(recognizer);\r\n\r\n        // let's make sure this recognizer exists\r\n        if (recognizer) {\r\n            var recognizers = this.recognizers;\r\n            var index = inArray(recognizers, recognizer);\r\n\r\n            if (index !== -1) {\r\n                recognizers.splice(index, 1);\r\n                this.touchAction.update();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * bind event\r\n     * @param {String} events\r\n     * @param {Function} handler\r\n     * @returns {EventEmitter} this\r\n     */\r\n    on: function(events, handler) {\r\n        if (events === undefined) {\r\n            return;\r\n        }\r\n        if (handler === undefined) {\r\n            return;\r\n        }\r\n\r\n        var handlers = this.handlers;\r\n        each(splitStr(events), function(event) {\r\n            handlers[event] = handlers[event] || [];\r\n            handlers[event].push(handler);\r\n        });\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * unbind event, leave emit blank to remove all handlers\r\n     * @param {String} events\r\n     * @param {Function} [handler]\r\n     * @returns {EventEmitter} this\r\n     */\r\n    off: function(events, handler) {\r\n        if (events === undefined) {\r\n            return;\r\n        }\r\n\r\n        var handlers = this.handlers;\r\n        each(splitStr(events), function(event) {\r\n            if (!handler) {\r\n                delete handlers[event];\r\n            } else {\r\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\r\n            }\r\n        });\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * emit event to the listeners\r\n     * @param {String} event\r\n     * @param {Object} data\r\n     */\r\n    emit: function(event, data) {\r\n        // we also want to trigger dom events\r\n        if (this.options.domEvents) {\r\n            triggerDomEvent(event, data);\r\n        }\r\n\r\n        // no handlers, so skip it all\r\n        var handlers = this.handlers[event] && this.handlers[event].slice();\r\n        if (!handlers || !handlers.length) {\r\n            return;\r\n        }\r\n\r\n        data.type = event;\r\n        data.preventDefault = function() {\r\n            data.srcEvent.preventDefault();\r\n        };\r\n\r\n        var i = 0;\r\n        while (i < handlers.length) {\r\n            handlers[i](data);\r\n            i++;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * destroy the manager and unbinds all events\r\n     * it doesn't unbind dom events, that is the user own responsibility\r\n     */\r\n    destroy: function() {\r\n        this.element && toggleCssProps(this, false);\r\n\r\n        this.handlers = {};\r\n        this.session = {};\r\n        this.input.destroy();\r\n        this.element = null;\r\n    }\r\n};\r\n\r\n/**\r\n * add/remove the css properties as defined in manager.options.cssProps\r\n * @param {Manager} manager\r\n * @param {Boolean} add\r\n */\r\nfunction toggleCssProps(manager, add) {\r\n    var element = manager.element;\r\n    if (!element.style) {\r\n        return;\r\n    }\r\n    var prop;\r\n    each(manager.options.cssProps, function(value, name) {\r\n        prop = prefixed(element.style, name);\r\n        if (add) {\r\n            manager.oldCssProps[prop] = element.style[prop];\r\n            element.style[prop] = value;\r\n        } else {\r\n            element.style[prop] = manager.oldCssProps[prop] || '';\r\n        }\r\n    });\r\n    if (!add) {\r\n        manager.oldCssProps = {};\r\n    }\r\n}\r\n\r\n/**\r\n * trigger dom event\r\n * @param {String} event\r\n * @param {Object} data\r\n */\r\nfunction triggerDomEvent(event, data) {\r\n    var gestureEvent = document.createEvent('Event');\r\n    gestureEvent.initEvent(event, true, true);\r\n    gestureEvent.gesture = data;\r\n    data.target.dispatchEvent(gestureEvent);\r\n}\r\n\r\nassign(Hammer, {\r\n    INPUT_START: INPUT_START,\r\n    INPUT_MOVE: INPUT_MOVE,\r\n    INPUT_END: INPUT_END,\r\n    INPUT_CANCEL: INPUT_CANCEL,\r\n\r\n    STATE_POSSIBLE: STATE_POSSIBLE,\r\n    STATE_BEGAN: STATE_BEGAN,\r\n    STATE_CHANGED: STATE_CHANGED,\r\n    STATE_ENDED: STATE_ENDED,\r\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\r\n    STATE_CANCELLED: STATE_CANCELLED,\r\n    STATE_FAILED: STATE_FAILED,\r\n\r\n    DIRECTION_NONE: DIRECTION_NONE,\r\n    DIRECTION_LEFT: DIRECTION_LEFT,\r\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\r\n    DIRECTION_UP: DIRECTION_UP,\r\n    DIRECTION_DOWN: DIRECTION_DOWN,\r\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\r\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\r\n    DIRECTION_ALL: DIRECTION_ALL,\r\n\r\n    Manager: Manager,\r\n    Input: Input,\r\n    TouchAction: TouchAction,\r\n\r\n    TouchInput: TouchInput,\r\n    MouseInput: MouseInput,\r\n    PointerEventInput: PointerEventInput,\r\n    TouchMouseInput: TouchMouseInput,\r\n    SingleTouchInput: SingleTouchInput,\r\n\r\n    Recognizer: Recognizer,\r\n    AttrRecognizer: AttrRecognizer,\r\n    Tap: TapRecognizer,\r\n    Pan: PanRecognizer,\r\n    Swipe: SwipeRecognizer,\r\n    Pinch: PinchRecognizer,\r\n    Rotate: RotateRecognizer,\r\n    Press: PressRecognizer,\r\n\r\n    on: addEventListeners,\r\n    off: removeEventListeners,\r\n    each: each,\r\n    merge: merge,\r\n    extend: extend,\r\n    assign: assign,\r\n    inherit: inherit,\r\n    bindFn: bindFn,\r\n    prefixed: prefixed\r\n});\r\n\r\n// this prevents errors when Hammer is loaded in the presence of an AMD\r\n//  style loader but by script tag, not by the loader.\r\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\r\nfreeGlobal.Hammer = Hammer;\r\n\r\nif (typeof define === 'function' && define.amd) {\r\n    define(function() {\r\n        return Hammer;\r\n    });\r\n} else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Hammer;\r\n} else {\r\n    window[exportName] = Hammer;\r\n}\r\n\r\n})(window, document, 'Hammer');\r\n", "export default require(\"./node_modules/hammerjs/hammer.js\");"],
  "mappings": "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",
  "names": ["window", "document", "assign", "extend", "merge", "self"]
}
