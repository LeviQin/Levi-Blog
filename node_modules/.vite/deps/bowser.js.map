{
  "version": 3,
  "sources": ["../../bowser/src/constants.js", "../../bowser/src/utils.js", "../../bowser/src/parser-browsers.js", "../../bowser/src/parser-os.js", "../../bowser/src/parser-platforms.js", "../../bowser/src/parser-engines.js", "../../bowser/src/parser.js", "../../bowser/src/bowser.js", "dep:bowser"],
  "sourcesContent": ["// NOTE: this list must be up-to-date with browsers listed in\r\n// test/acceptance/useragentstrings.yml\r\nexport const BROWSER_ALIASES_MAP = {\r\n  'Amazon Silk': 'amazon_silk',\r\n  'Android Browser': 'android',\r\n  Bada: 'bada',\r\n  BlackBerry: 'blackberry',\r\n  Chrome: 'chrome',\r\n  Chromium: 'chromium',\r\n  Electron: 'electron',\r\n  Epiphany: 'epiphany',\r\n  Firefox: 'firefox',\r\n  Focus: 'focus',\r\n  Generic: 'generic',\r\n  'Google Search': 'google_search',\r\n  Googlebot: 'googlebot',\r\n  'Internet Explorer': 'ie',\r\n  'K-Meleon': 'k_meleon',\r\n  Maxthon: 'maxthon',\r\n  'Microsoft Edge': 'edge',\r\n  'MZ Browser': 'mz',\r\n  'NAVER Whale Browser': 'naver',\r\n  Opera: 'opera',\r\n  'Opera Coast': 'opera_coast',\r\n  PhantomJS: 'phantomjs',\r\n  Puffin: 'puffin',\r\n  QupZilla: 'qupzilla',\r\n  QQ: 'qq',\r\n  QQLite: 'qqlite',\r\n  Safari: 'safari',\r\n  Sailfish: 'sailfish',\r\n  'Samsung Internet for Android': 'samsung_internet',\r\n  SeaMonkey: 'seamonkey',\r\n  Sleipnir: 'sleipnir',\r\n  Swing: 'swing',\r\n  Tizen: 'tizen',\r\n  'UC Browser': 'uc',\r\n  Vivaldi: 'vivaldi',\r\n  'WebOS Browser': 'webos',\r\n  WeChat: 'wechat',\r\n  'Yandex Browser': 'yandex',\r\n  Roku: 'roku',\r\n};\r\n\r\nexport const BROWSER_MAP = {\r\n  amazon_silk: 'Amazon Silk',\r\n  android: 'Android Browser',\r\n  bada: 'Bada',\r\n  blackberry: 'BlackBerry',\r\n  chrome: 'Chrome',\r\n  chromium: 'Chromium',\r\n  electron: 'Electron',\r\n  epiphany: 'Epiphany',\r\n  firefox: 'Firefox',\r\n  focus: 'Focus',\r\n  generic: 'Generic',\r\n  googlebot: 'Googlebot',\r\n  google_search: 'Google Search',\r\n  ie: 'Internet Explorer',\r\n  k_meleon: 'K-Meleon',\r\n  maxthon: 'Maxthon',\r\n  edge: 'Microsoft Edge',\r\n  mz: 'MZ Browser',\r\n  naver: 'NAVER Whale Browser',\r\n  opera: 'Opera',\r\n  opera_coast: 'Opera Coast',\r\n  phantomjs: 'PhantomJS',\r\n  puffin: 'Puffin',\r\n  qupzilla: 'QupZilla',\r\n  qq: 'QQ Browser',\r\n  qqlite: 'QQ Browser Lite',\r\n  safari: 'Safari',\r\n  sailfish: 'Sailfish',\r\n  samsung_internet: 'Samsung Internet for Android',\r\n  seamonkey: 'SeaMonkey',\r\n  sleipnir: 'Sleipnir',\r\n  swing: 'Swing',\r\n  tizen: 'Tizen',\r\n  uc: 'UC Browser',\r\n  vivaldi: 'Vivaldi',\r\n  webos: 'WebOS Browser',\r\n  wechat: 'WeChat',\r\n  yandex: 'Yandex Browser',\r\n};\r\n\r\nexport const PLATFORMS_MAP = {\r\n  tablet: 'tablet',\r\n  mobile: 'mobile',\r\n  desktop: 'desktop',\r\n  tv: 'tv',\r\n};\r\n\r\nexport const OS_MAP = {\r\n  WindowsPhone: 'Windows Phone',\r\n  Windows: 'Windows',\r\n  MacOS: 'macOS',\r\n  iOS: 'iOS',\r\n  Android: 'Android',\r\n  WebOS: 'WebOS',\r\n  BlackBerry: 'BlackBerry',\r\n  Bada: 'Bada',\r\n  Tizen: 'Tizen',\r\n  Linux: 'Linux',\r\n  ChromeOS: 'Chrome OS',\r\n  PlayStation4: 'PlayStation 4',\r\n  Roku: 'Roku',\r\n};\r\n\r\nexport const ENGINE_MAP = {\r\n  EdgeHTML: 'EdgeHTML',\r\n  Blink: 'Blink',\r\n  Trident: 'Trident',\r\n  Presto: 'Presto',\r\n  Gecko: 'Gecko',\r\n  WebKit: 'WebKit',\r\n};\r\n", "import { BROWSER_MAP, BROWSER_ALIASES_MAP } from './constants.js';\r\n\r\nexport default class Utils {\r\n  /**\r\n   * Get first matched item for a string\r\n   * @param {RegExp} regexp\r\n   * @param {String} ua\r\n   * @return {Array|{index: number, input: string}|*|boolean|string}\r\n   */\r\n  static getFirstMatch(regexp, ua) {\r\n    const match = ua.match(regexp);\r\n    return (match && match.length > 0 && match[1]) || '';\r\n  }\r\n\r\n  /**\r\n   * Get second matched item for a string\r\n   * @param regexp\r\n   * @param {String} ua\r\n   * @return {Array|{index: number, input: string}|*|boolean|string}\r\n   */\r\n  static getSecondMatch(regexp, ua) {\r\n    const match = ua.match(regexp);\r\n    return (match && match.length > 1 && match[2]) || '';\r\n  }\r\n\r\n  /**\r\n   * Match a regexp and return a constant or undefined\r\n   * @param {RegExp} regexp\r\n   * @param {String} ua\r\n   * @param {*} _const Any const that will be returned if regexp matches the string\r\n   * @return {*}\r\n   */\r\n  static matchAndReturnConst(regexp, ua, _const) {\r\n    if (regexp.test(ua)) {\r\n      return _const;\r\n    }\r\n    return void (0);\r\n  }\r\n\r\n  static getWindowsVersionName(version) {\r\n    switch (version) {\r\n      case 'NT': return 'NT';\r\n      case 'XP': return 'XP';\r\n      case 'NT 5.0': return '2000';\r\n      case 'NT 5.1': return 'XP';\r\n      case 'NT 5.2': return '2003';\r\n      case 'NT 6.0': return 'Vista';\r\n      case 'NT 6.1': return '7';\r\n      case 'NT 6.2': return '8';\r\n      case 'NT 6.3': return '8.1';\r\n      case 'NT 10.0': return '10';\r\n      default: return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get macOS version name\r\n   *    10.5 - Leopard\r\n   *    10.6 - Snow Leopard\r\n   *    10.7 - Lion\r\n   *    10.8 - Mountain Lion\r\n   *    10.9 - Mavericks\r\n   *    10.10 - Yosemite\r\n   *    10.11 - El Capitan\r\n   *    10.12 - Sierra\r\n   *    10.13 - High Sierra\r\n   *    10.14 - Mojave\r\n   *    10.15 - Catalina\r\n   *\r\n   * @example\r\n   *   getMacOSVersionName(\"10.14\") // 'Mojave'\r\n   *\r\n   * @param  {string} version\r\n   * @return {string} versionName\r\n   */\r\n  static getMacOSVersionName(version) {\r\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\r\n    v.push(0);\r\n    if (v[0] !== 10) return undefined;\r\n    switch (v[1]) {\r\n      case 5: return 'Leopard';\r\n      case 6: return 'Snow Leopard';\r\n      case 7: return 'Lion';\r\n      case 8: return 'Mountain Lion';\r\n      case 9: return 'Mavericks';\r\n      case 10: return 'Yosemite';\r\n      case 11: return 'El Capitan';\r\n      case 12: return 'Sierra';\r\n      case 13: return 'High Sierra';\r\n      case 14: return 'Mojave';\r\n      case 15: return 'Catalina';\r\n      default: return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Android version name\r\n   *    1.5 - Cupcake\r\n   *    1.6 - Donut\r\n   *    2.0 - Eclair\r\n   *    2.1 - Eclair\r\n   *    2.2 - Froyo\r\n   *    2.x - Gingerbread\r\n   *    3.x - Honeycomb\r\n   *    4.0 - Ice Cream Sandwich\r\n   *    4.1 - Jelly Bean\r\n   *    4.4 - KitKat\r\n   *    5.x - Lollipop\r\n   *    6.x - Marshmallow\r\n   *    7.x - Nougat\r\n   *    8.x - Oreo\r\n   *    9.x - Pie\r\n   *\r\n   * @example\r\n   *   getAndroidVersionName(\"7.0\") // 'Nougat'\r\n   *\r\n   * @param  {string} version\r\n   * @return {string} versionName\r\n   */\r\n  static getAndroidVersionName(version) {\r\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\r\n    v.push(0);\r\n    if (v[0] === 1 && v[1] < 5) return undefined;\r\n    if (v[0] === 1 && v[1] < 6) return 'Cupcake';\r\n    if (v[0] === 1 && v[1] >= 6) return 'Donut';\r\n    if (v[0] === 2 && v[1] < 2) return 'Eclair';\r\n    if (v[0] === 2 && v[1] === 2) return 'Froyo';\r\n    if (v[0] === 2 && v[1] > 2) return 'Gingerbread';\r\n    if (v[0] === 3) return 'Honeycomb';\r\n    if (v[0] === 4 && v[1] < 1) return 'Ice Cream Sandwich';\r\n    if (v[0] === 4 && v[1] < 4) return 'Jelly Bean';\r\n    if (v[0] === 4 && v[1] >= 4) return 'KitKat';\r\n    if (v[0] === 5) return 'Lollipop';\r\n    if (v[0] === 6) return 'Marshmallow';\r\n    if (v[0] === 7) return 'Nougat';\r\n    if (v[0] === 8) return 'Oreo';\r\n    if (v[0] === 9) return 'Pie';\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get version precisions count\r\n   *\r\n   * @example\r\n   *   getVersionPrecision(\"1.10.3\") // 3\r\n   *\r\n   * @param  {string} version\r\n   * @return {number}\r\n   */\r\n  static getVersionPrecision(version) {\r\n    return version.split('.').length;\r\n  }\r\n\r\n  /**\r\n   * Calculate browser version weight\r\n   *\r\n   * @example\r\n   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1\r\n   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1\r\n   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0\r\n   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1\r\n   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0\r\n   *\r\n   * @param {String} versionA versions versions to compare\r\n   * @param {String} versionB versions versions to compare\r\n   * @param {boolean} [isLoose] enable loose comparison\r\n   * @return {Number} comparison result: -1 when versionA is lower,\r\n   * 1 when versionA is bigger, 0 when both equal\r\n   */\r\n  /* eslint consistent-return: 1 */\r\n  static compareVersions(versionA, versionB, isLoose = false) {\r\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\r\n    const versionAPrecision = Utils.getVersionPrecision(versionA);\r\n    const versionBPrecision = Utils.getVersionPrecision(versionB);\r\n\r\n    let precision = Math.max(versionAPrecision, versionBPrecision);\r\n    let lastPrecision = 0;\r\n\r\n    const chunks = Utils.map([versionA, versionB], (version) => {\r\n      const delta = precision - Utils.getVersionPrecision(version);\r\n\r\n      // 2) \"9\" -> \"9.0\" (for precision = 2)\r\n      const _version = version + new Array(delta + 1).join('.0');\r\n\r\n      // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\r\n      return Utils.map(_version.split('.'), chunk => new Array(20 - chunk.length).join('0') + chunk).reverse();\r\n    });\r\n\r\n    // adjust precision for loose comparison\r\n    if (isLoose) {\r\n      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);\r\n    }\r\n\r\n    // iterate in reverse order by reversed chunks array\r\n    precision -= 1;\r\n    while (precision >= lastPrecision) {\r\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\r\n      if (chunks[0][precision] > chunks[1][precision]) {\r\n        return 1;\r\n      }\r\n\r\n      if (chunks[0][precision] === chunks[1][precision]) {\r\n        if (precision === lastPrecision) {\r\n          // all version chunks are same\r\n          return 0;\r\n        }\r\n\r\n        precision -= 1;\r\n      } else if (chunks[0][precision] < chunks[1][precision]) {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Array::map polyfill\r\n   *\r\n   * @param  {Array} arr\r\n   * @param  {Function} iterator\r\n   * @return {Array}\r\n   */\r\n  static map(arr, iterator) {\r\n    const result = [];\r\n    let i;\r\n    if (Array.prototype.map) {\r\n      return Array.prototype.map.call(arr, iterator);\r\n    }\r\n    for (i = 0; i < arr.length; i += 1) {\r\n      result.push(iterator(arr[i]));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Array::find polyfill\r\n   *\r\n   * @param  {Array} arr\r\n   * @param  {Function} predicate\r\n   * @return {Array}\r\n   */\r\n  static find(arr, predicate) {\r\n    let i;\r\n    let l;\r\n    if (Array.prototype.find) {\r\n      return Array.prototype.find.call(arr, predicate);\r\n    }\r\n    for (i = 0, l = arr.length; i < l; i += 1) {\r\n      const value = arr[i];\r\n      if (predicate(value, i)) {\r\n        return value;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Object::assign polyfill\r\n   *\r\n   * @param  {Object} obj\r\n   * @param  {Object} ...objs\r\n   * @return {Object}\r\n   */\r\n  static assign(obj, ...assigners) {\r\n    const result = obj;\r\n    let i;\r\n    let l;\r\n    if (Object.assign) {\r\n      return Object.assign(obj, ...assigners);\r\n    }\r\n    for (i = 0, l = assigners.length; i < l; i += 1) {\r\n      const assigner = assigners[i];\r\n      if (typeof assigner === 'object' && assigner !== null) {\r\n        const keys = Object.keys(assigner);\r\n        keys.forEach((key) => {\r\n          result[key] = assigner[key];\r\n        });\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * Get short version/alias for a browser name\r\n   *\r\n   * @example\r\n   *   getBrowserAlias('Microsoft Edge') // edge\r\n   *\r\n   * @param  {string} browserName\r\n   * @return {string}\r\n   */\r\n  static getBrowserAlias(browserName) {\r\n    return BROWSER_ALIASES_MAP[browserName];\r\n  }\r\n\r\n  /**\r\n   * Get short version/alias for a browser name\r\n   *\r\n   * @example\r\n   *   getBrowserAlias('edge') // Microsoft Edge\r\n   *\r\n   * @param  {string} browserAlias\r\n   * @return {string}\r\n   */\r\n  static getBrowserTypeByAlias(browserAlias) {\r\n    return BROWSER_MAP[browserAlias] || '';\r\n  }\r\n}\r\n", "/**\r\n * Browsers' descriptors\r\n *\r\n * The idea of descriptors is simple. You should know about them two simple things:\r\n * 1. Every descriptor has a method or property called `test` and a `describe` method.\r\n * 2. Order of descriptors is important.\r\n *\r\n * More details:\r\n * 1. Method or property `test` serves as a way to detect whether the UA string\r\n * matches some certain browser or not. The `describe` method helps to make a result\r\n * object with params that show some browser-specific things: name, version, etc.\r\n * 2. Order of descriptors is important because a Parser goes through them one by one\r\n * in course. For example, if you insert Chrome's descriptor as the first one,\r\n * more then a half of browsers will be described as Chrome, because they will pass\r\n * the Chrome descriptor's test.\r\n *\r\n * Descriptor's `test` could be a property with an array of RegExps, where every RegExp\r\n * will be applied to a UA string to test it whether it matches or not.\r\n * If a descriptor has two or more regexps in the `test` array it tests them one by one\r\n * with a logical sum operation. Parser stops if it has found any RegExp that matches the UA.\r\n *\r\n * Or `test` could be a method. In that case it gets a Parser instance and should\r\n * return true/false to get the Parser know if this browser descriptor matches the UA or not.\r\n */\r\n\r\nimport Utils from './utils.js';\r\n\r\nconst commonVersionIdentifier = /version\\/(\\d+(\\.?_?\\d+)+)/i;\r\n\r\nconst browsersList = [\r\n  /* Googlebot */\r\n  {\r\n    test: [/googlebot/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Googlebot',\r\n      };\r\n      const version = Utils.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* Opera < 13.0 */\r\n  {\r\n    test: [/opera/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Opera',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* Opera > 13.0 */\r\n  {\r\n    test: [/opr\\/|opios/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Opera',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/SamsungBrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Samsung Internet for Android',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/Whale/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'NAVER Whale Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/MZBrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'MZ Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/focus/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Focus',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/swing/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Swing',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/coast/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Opera Coast',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/opt\\/\\d+(?:.?_?\\d+)+/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Opera Touch',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/yabrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Yandex Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/ucbrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'UC Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/Maxthon|mxios/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Maxthon',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/epiphany/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Epiphany',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/puffin/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Puffin',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/sleipnir/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Sleipnir',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/k-meleon/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'K-Meleon',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/micromessenger/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'WeChat',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/qqbrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: (/qqbrowserlite/i).test(ua) ? 'QQ Browser Lite' : 'QQ Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/msie|trident/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Internet Explorer',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/\\sedg\\//i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Microsoft Edge',\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/edg([ea]|ios)/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Microsoft Edge',\r\n      };\r\n\r\n      const version = Utils.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/vivaldi/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Vivaldi',\r\n      };\r\n      const version = Utils.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/seamonkey/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'SeaMonkey',\r\n      };\r\n      const version = Utils.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/sailfish/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Sailfish',\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/silk/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Amazon Silk',\r\n      };\r\n      const version = Utils.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/phantom/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'PhantomJS',\r\n      };\r\n      const version = Utils.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/slimerjs/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'SlimerJS',\r\n      };\r\n      const version = Utils.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'BlackBerry',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/(web|hpw)[o0]s/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'WebOS Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/bada/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Bada',\r\n      };\r\n      const version = Utils.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/tizen/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Tizen',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/qupzilla/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'QupZilla',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/firefox|iceweasel|fxios/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Firefox',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/electron/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Electron',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/MiuiBrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Miui',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/chromium/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Chromium',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/chrome|crios|crmo/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Chrome',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/GSA/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Google Search',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* Android Browser */\r\n  {\r\n    test(parser) {\r\n      const notLikeAndroid = !parser.test(/like android/i);\r\n      const butAndroid = parser.test(/android/i);\r\n      return notLikeAndroid && butAndroid;\r\n    },\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Android Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* PlayStation 4 */\r\n  {\r\n    test: [/playstation 4/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'PlayStation 4',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* Safari */\r\n  {\r\n    test: [/safari|applewebkit/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Safari',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* Something else */\r\n  {\r\n    test: [/.*/i],\r\n    describe(ua) {\r\n      /* Here we try to make sure that there are explicit details about the device\r\n       * in order to decide what regexp exactly we want to apply\r\n       * (as there is a specific decision based on that conclusion)\r\n       */\r\n      const regexpWithoutDeviceSpec = /^(.*)\\/(.*) /;\r\n      const regexpWithDeviceSpec = /^(.*)\\/(.*)[ \\t]\\((.*)/;\r\n      const hasDeviceSpec = ua.search('\\\\(') !== -1;\r\n      const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;\r\n      return {\r\n        name: Utils.getFirstMatch(regexp, ua),\r\n        version: Utils.getSecondMatch(regexp, ua),\r\n      };\r\n    },\r\n  },\r\n];\r\n\r\nexport default browsersList;\r\n", "import Utils from './utils.js';\r\nimport { OS_MAP } from './constants.js';\r\n\r\nexport default [\r\n  /* Roku */\r\n  {\r\n    test: [/Roku\\/DVP/],\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i, ua);\r\n      return {\r\n        name: OS_MAP.Roku,\r\n        version,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Windows Phone */\r\n  {\r\n    test: [/windows phone/i],\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i, ua);\r\n      return {\r\n        name: OS_MAP.WindowsPhone,\r\n        version,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Windows */\r\n  {\r\n    test: [/windows /i],\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i, ua);\r\n      const versionName = Utils.getWindowsVersionName(version);\r\n\r\n      return {\r\n        name: OS_MAP.Windows,\r\n        version,\r\n        versionName,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Firefox on iPad */\r\n  {\r\n    test: [/Macintosh(.*?) FxiOS(.*?)\\//],\r\n    describe(ua) {\r\n      const result = {\r\n        name: OS_MAP.iOS,\r\n      };\r\n      const version = Utils.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/, ua);\r\n      if (version) {\r\n        result.version = version;\r\n      }\r\n      return result;\r\n    },\r\n  },\r\n\r\n  /* macOS */\r\n  {\r\n    test: [/macintosh/i],\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i, ua).replace(/[_\\s]/g, '.');\r\n      const versionName = Utils.getMacOSVersionName(version);\r\n\r\n      const os = {\r\n        name: OS_MAP.MacOS,\r\n        version,\r\n      };\r\n      if (versionName) {\r\n        os.versionName = versionName;\r\n      }\r\n      return os;\r\n    },\r\n  },\r\n\r\n  /* iOS */\r\n  {\r\n    test: [/(ipod|iphone|ipad)/i],\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i, ua).replace(/[_\\s]/g, '.');\r\n\r\n      return {\r\n        name: OS_MAP.iOS,\r\n        version,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Android */\r\n  {\r\n    test(parser) {\r\n      const notLikeAndroid = !parser.test(/like android/i);\r\n      const butAndroid = parser.test(/android/i);\r\n      return notLikeAndroid && butAndroid;\r\n    },\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i, ua);\r\n      const versionName = Utils.getAndroidVersionName(version);\r\n      const os = {\r\n        name: OS_MAP.Android,\r\n        version,\r\n      };\r\n      if (versionName) {\r\n        os.versionName = versionName;\r\n      }\r\n      return os;\r\n    },\r\n  },\r\n\r\n  /* WebOS */\r\n  {\r\n    test: [/(web|hpw)[o0]s/i],\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i, ua);\r\n      const os = {\r\n        name: OS_MAP.WebOS,\r\n      };\r\n\r\n      if (version && version.length) {\r\n        os.version = version;\r\n      }\r\n      return os;\r\n    },\r\n  },\r\n\r\n  /* BlackBerry */\r\n  {\r\n    test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i],\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i, ua)\r\n        || Utils.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i, ua)\r\n        || Utils.getFirstMatch(/\\bbb(\\d+)/i, ua);\r\n\r\n      return {\r\n        name: OS_MAP.BlackBerry,\r\n        version,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Bada */\r\n  {\r\n    test: [/bada/i],\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i, ua);\r\n\r\n      return {\r\n        name: OS_MAP.Bada,\r\n        version,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Tizen */\r\n  {\r\n    test: [/tizen/i],\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i, ua);\r\n\r\n      return {\r\n        name: OS_MAP.Tizen,\r\n        version,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Linux */\r\n  {\r\n    test: [/linux/i],\r\n    describe() {\r\n      return {\r\n        name: OS_MAP.Linux,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Chrome OS */\r\n  {\r\n    test: [/CrOS/],\r\n    describe() {\r\n      return {\r\n        name: OS_MAP.ChromeOS,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Playstation 4 */\r\n  {\r\n    test: [/PlayStation 4/],\r\n    describe(ua) {\r\n      const version = Utils.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i, ua);\r\n      return {\r\n        name: OS_MAP.PlayStation4,\r\n        version,\r\n      };\r\n    },\r\n  },\r\n];\r\n", "import Utils from './utils.js';\r\nimport { PLATFORMS_MAP } from './constants.js';\r\n\r\n/*\r\n * Tablets go first since usually they have more specific\r\n * signs to detect.\r\n */\r\n\r\nexport default [\r\n  /* Googlebot */\r\n  {\r\n    test: [/googlebot/i],\r\n    describe() {\r\n      return {\r\n        type: 'bot',\r\n        vendor: 'Google',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Huawei */\r\n  {\r\n    test: [/huawei/i],\r\n    describe(ua) {\r\n      const model = Utils.getFirstMatch(/(can-l01)/i, ua) && 'Nova';\r\n      const platform = {\r\n        type: PLATFORMS_MAP.mobile,\r\n        vendor: 'Huawei',\r\n      };\r\n      if (model) {\r\n        platform.model = model;\r\n      }\r\n      return platform;\r\n    },\r\n  },\r\n\r\n  /* Nexus Tablet */\r\n  {\r\n    test: [/nexus\\s*(?:7|8|9|10).*/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n        vendor: 'Nexus',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* iPad */\r\n  {\r\n    test: [/ipad/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n        vendor: 'Apple',\r\n        model: 'iPad',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Firefox on iPad */\r\n  {\r\n    test: [/Macintosh(.*?) FxiOS(.*?)\\//],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n        vendor: 'Apple',\r\n        model: 'iPad',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Amazon Kindle Fire */\r\n  {\r\n    test: [/kftt build/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n        vendor: 'Amazon',\r\n        model: 'Kindle Fire HD 7',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Another Amazon Tablet with Silk */\r\n  {\r\n    test: [/silk/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n        vendor: 'Amazon',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Tablet */\r\n  {\r\n    test: [/tablet(?! pc)/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* iPod/iPhone */\r\n  {\r\n    test(parser) {\r\n      const iDevice = parser.test(/ipod|iphone/i);\r\n      const likeIDevice = parser.test(/like (ipod|iphone)/i);\r\n      return iDevice && !likeIDevice;\r\n    },\r\n    describe(ua) {\r\n      const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n        vendor: 'Apple',\r\n        model,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Nexus Mobile */\r\n  {\r\n    test: [/nexus\\s*[0-6].*/i, /galaxy nexus/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n        vendor: 'Nexus',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Mobile */\r\n  {\r\n    test: [/[^-]mobi/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* BlackBerry */\r\n  {\r\n    test(parser) {\r\n      return parser.getBrowserName(true) === 'blackberry';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n        vendor: 'BlackBerry',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Bada */\r\n  {\r\n    test(parser) {\r\n      return parser.getBrowserName(true) === 'bada';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Windows Phone */\r\n  {\r\n    test(parser) {\r\n      return parser.getBrowserName() === 'windows phone';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n        vendor: 'Microsoft',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Android Tablet */\r\n  {\r\n    test(parser) {\r\n      const osMajorVersion = Number(String(parser.getOSVersion()).split('.')[0]);\r\n      return parser.getOSName(true) === 'android' && (osMajorVersion >= 3);\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Android Mobile */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'android';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* desktop */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'macos';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.desktop,\r\n        vendor: 'Apple',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Windows */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'windows';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.desktop,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Linux */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'linux';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.desktop,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* PlayStation 4 */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'playstation 4';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tv,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Roku */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'roku';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tv,\r\n      };\r\n    },\r\n  },\r\n];\r\n", "import Utils from './utils.js';\r\nimport { ENGINE_MAP } from './constants.js';\r\n\r\n/*\r\n * More specific goes first\r\n */\r\nexport default [\r\n  /* EdgeHTML */\r\n  {\r\n    test(parser) {\r\n      return parser.getBrowserName(true) === 'microsoft edge';\r\n    },\r\n    describe(ua) {\r\n      const isBlinkBased = /\\sedg\\//i.test(ua);\r\n\r\n      // return blink if it's blink-based one\r\n      if (isBlinkBased) {\r\n        return {\r\n          name: ENGINE_MAP.Blink,\r\n        };\r\n      }\r\n\r\n      // otherwise match the version and return EdgeHTML\r\n      const version = Utils.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      return {\r\n        name: ENGINE_MAP.EdgeHTML,\r\n        version,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Trident */\r\n  {\r\n    test: [/trident/i],\r\n    describe(ua) {\r\n      const engine = {\r\n        name: ENGINE_MAP.Trident,\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        engine.version = version;\r\n      }\r\n\r\n      return engine;\r\n    },\r\n  },\r\n\r\n  /* Presto */\r\n  {\r\n    test(parser) {\r\n      return parser.test(/presto/i);\r\n    },\r\n    describe(ua) {\r\n      const engine = {\r\n        name: ENGINE_MAP.Presto,\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        engine.version = version;\r\n      }\r\n\r\n      return engine;\r\n    },\r\n  },\r\n\r\n  /* Gecko */\r\n  {\r\n    test(parser) {\r\n      const isGecko = parser.test(/gecko/i);\r\n      const likeGecko = parser.test(/like gecko/i);\r\n      return isGecko && !likeGecko;\r\n    },\r\n    describe(ua) {\r\n      const engine = {\r\n        name: ENGINE_MAP.Gecko,\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        engine.version = version;\r\n      }\r\n\r\n      return engine;\r\n    },\r\n  },\r\n\r\n  /* Blink */\r\n  {\r\n    test: [/(apple)?webkit\\/537\\.36/i],\r\n    describe() {\r\n      return {\r\n        name: ENGINE_MAP.Blink,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* WebKit */\r\n  {\r\n    test: [/(apple)?webkit/i],\r\n    describe(ua) {\r\n      const engine = {\r\n        name: ENGINE_MAP.WebKit,\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        engine.version = version;\r\n      }\r\n\r\n      return engine;\r\n    },\r\n  },\r\n];\r\n", "import browserParsersList from './parser-browsers.js';\r\nimport osParsersList from './parser-os.js';\r\nimport platformParsersList from './parser-platforms.js';\r\nimport enginesParsersList from './parser-engines.js';\r\nimport Utils from './utils.js';\r\n\r\n/**\r\n * The main class that arranges the whole parsing process.\r\n */\r\nclass Parser {\r\n  /**\r\n   * Create instance of Parser\r\n   *\r\n   * @param {String} UA User-Agent string\r\n   * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance\r\n   * improvements if you need to make a more particular parsing\r\n   * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}\r\n   *\r\n   * @throw {Error} in case of empty UA String\r\n   *\r\n   * @constructor\r\n   */\r\n  constructor(UA, skipParsing = false) {\r\n    if (UA === void (0) || UA === null || UA === '') {\r\n      throw new Error(\"UserAgent parameter can't be empty\");\r\n    }\r\n\r\n    this._ua = UA;\r\n\r\n    /**\r\n     * @typedef ParsedResult\r\n     * @property {Object} browser\r\n     * @property {String|undefined} [browser.name]\r\n     * Browser name, like `\"Chrome\"` or `\"Internet Explorer\"`\r\n     * @property {String|undefined} [browser.version] Browser version as a String `\"12.01.45334.10\"`\r\n     * @property {Object} os\r\n     * @property {String|undefined} [os.name] OS name, like `\"Windows\"` or `\"macOS\"`\r\n     * @property {String|undefined} [os.version] OS version, like `\"NT 5.1\"` or `\"10.11.1\"`\r\n     * @property {String|undefined} [os.versionName] OS name, like `\"XP\"` or `\"High Sierra\"`\r\n     * @property {Object} platform\r\n     * @property {String|undefined} [platform.type]\r\n     * platform type, can be either `\"desktop\"`, `\"tablet\"` or `\"mobile\"`\r\n     * @property {String|undefined} [platform.vendor] Vendor of the device,\r\n     * like `\"Apple\"` or `\"Samsung\"`\r\n     * @property {String|undefined} [platform.model] Device model,\r\n     * like `\"iPhone\"` or `\"Kindle Fire HD 7\"`\r\n     * @property {Object} engine\r\n     * @property {String|undefined} [engine.name]\r\n     * Can be any of this: `WebKit`, `Blink`, `Gecko`, `Trident`, `Presto`, `EdgeHTML`\r\n     * @property {String|undefined} [engine.version] String version of the engine\r\n     */\r\n    this.parsedResult = {};\r\n\r\n    if (skipParsing !== true) {\r\n      this.parse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get UserAgent string of current Parser instance\r\n   * @return {String} User-Agent String of the current <Parser> object\r\n   *\r\n   * @public\r\n   */\r\n  getUA() {\r\n    return this._ua;\r\n  }\r\n\r\n  /**\r\n   * Test a UA string for a regexp\r\n   * @param {RegExp} regex\r\n   * @return {Boolean}\r\n   */\r\n  test(regex) {\r\n    return regex.test(this._ua);\r\n  }\r\n\r\n  /**\r\n   * Get parsed browser object\r\n   * @return {Object}\r\n   */\r\n  parseBrowser() {\r\n    this.parsedResult.browser = {};\r\n\r\n    const browserDescriptor = Utils.find(browserParsersList, (_browser) => {\r\n      if (typeof _browser.test === 'function') {\r\n        return _browser.test(this);\r\n      }\r\n\r\n      if (_browser.test instanceof Array) {\r\n        return _browser.test.some(condition => this.test(condition));\r\n      }\r\n\r\n      throw new Error(\"Browser's test function is not valid\");\r\n    });\r\n\r\n    if (browserDescriptor) {\r\n      this.parsedResult.browser = browserDescriptor.describe(this.getUA());\r\n    }\r\n\r\n    return this.parsedResult.browser;\r\n  }\r\n\r\n  /**\r\n   * Get parsed browser object\r\n   * @return {Object}\r\n   *\r\n   * @public\r\n   */\r\n  getBrowser() {\r\n    if (this.parsedResult.browser) {\r\n      return this.parsedResult.browser;\r\n    }\r\n\r\n    return this.parseBrowser();\r\n  }\r\n\r\n  /**\r\n   * Get browser's name\r\n   * @return {String} Browser's name or an empty string\r\n   *\r\n   * @public\r\n   */\r\n  getBrowserName(toLowerCase) {\r\n    if (toLowerCase) {\r\n      return String(this.getBrowser().name).toLowerCase() || '';\r\n    }\r\n    return this.getBrowser().name || '';\r\n  }\r\n\r\n\r\n  /**\r\n   * Get browser's version\r\n   * @return {String} version of browser\r\n   *\r\n   * @public\r\n   */\r\n  getBrowserVersion() {\r\n    return this.getBrowser().version;\r\n  }\r\n\r\n  /**\r\n   * Get OS\r\n   * @return {Object}\r\n   *\r\n   * @example\r\n   * this.getOS();\r\n   * {\r\n   *   name: 'macOS',\r\n   *   version: '10.11.12'\r\n   * }\r\n   */\r\n  getOS() {\r\n    if (this.parsedResult.os) {\r\n      return this.parsedResult.os;\r\n    }\r\n\r\n    return this.parseOS();\r\n  }\r\n\r\n  /**\r\n   * Parse OS and save it to this.parsedResult.os\r\n   * @return {*|{}}\r\n   */\r\n  parseOS() {\r\n    this.parsedResult.os = {};\r\n\r\n    const os = Utils.find(osParsersList, (_os) => {\r\n      if (typeof _os.test === 'function') {\r\n        return _os.test(this);\r\n      }\r\n\r\n      if (_os.test instanceof Array) {\r\n        return _os.test.some(condition => this.test(condition));\r\n      }\r\n\r\n      throw new Error(\"Browser's test function is not valid\");\r\n    });\r\n\r\n    if (os) {\r\n      this.parsedResult.os = os.describe(this.getUA());\r\n    }\r\n\r\n    return this.parsedResult.os;\r\n  }\r\n\r\n  /**\r\n   * Get OS name\r\n   * @param {Boolean} [toLowerCase] return lower-cased value\r\n   * @return {String} name of the OS \u2014 macOS, Windows, Linux, etc.\r\n   */\r\n  getOSName(toLowerCase) {\r\n    const { name } = this.getOS();\r\n\r\n    if (toLowerCase) {\r\n      return String(name).toLowerCase() || '';\r\n    }\r\n\r\n    return name || '';\r\n  }\r\n\r\n  /**\r\n   * Get OS version\r\n   * @return {String} full version with dots ('10.11.12', '5.6', etc)\r\n   */\r\n  getOSVersion() {\r\n    return this.getOS().version;\r\n  }\r\n\r\n  /**\r\n   * Get parsed platform\r\n   * @return {{}}\r\n   */\r\n  getPlatform() {\r\n    if (this.parsedResult.platform) {\r\n      return this.parsedResult.platform;\r\n    }\r\n\r\n    return this.parsePlatform();\r\n  }\r\n\r\n  /**\r\n   * Get platform name\r\n   * @param {Boolean} [toLowerCase=false]\r\n   * @return {*}\r\n   */\r\n  getPlatformType(toLowerCase = false) {\r\n    const { type } = this.getPlatform();\r\n\r\n    if (toLowerCase) {\r\n      return String(type).toLowerCase() || '';\r\n    }\r\n\r\n    return type || '';\r\n  }\r\n\r\n  /**\r\n   * Get parsed platform\r\n   * @return {{}}\r\n   */\r\n  parsePlatform() {\r\n    this.parsedResult.platform = {};\r\n\r\n    const platform = Utils.find(platformParsersList, (_platform) => {\r\n      if (typeof _platform.test === 'function') {\r\n        return _platform.test(this);\r\n      }\r\n\r\n      if (_platform.test instanceof Array) {\r\n        return _platform.test.some(condition => this.test(condition));\r\n      }\r\n\r\n      throw new Error(\"Browser's test function is not valid\");\r\n    });\r\n\r\n    if (platform) {\r\n      this.parsedResult.platform = platform.describe(this.getUA());\r\n    }\r\n\r\n    return this.parsedResult.platform;\r\n  }\r\n\r\n  /**\r\n   * Get parsed engine\r\n   * @return {{}}\r\n   */\r\n  getEngine() {\r\n    if (this.parsedResult.engine) {\r\n      return this.parsedResult.engine;\r\n    }\r\n\r\n    return this.parseEngine();\r\n  }\r\n\r\n  /**\r\n   * Get engines's name\r\n   * @return {String} Engines's name or an empty string\r\n   *\r\n   * @public\r\n   */\r\n  getEngineName(toLowerCase) {\r\n    if (toLowerCase) {\r\n      return String(this.getEngine().name).toLowerCase() || '';\r\n    }\r\n    return this.getEngine().name || '';\r\n  }\r\n\r\n  /**\r\n   * Get parsed platform\r\n   * @return {{}}\r\n   */\r\n  parseEngine() {\r\n    this.parsedResult.engine = {};\r\n\r\n    const engine = Utils.find(enginesParsersList, (_engine) => {\r\n      if (typeof _engine.test === 'function') {\r\n        return _engine.test(this);\r\n      }\r\n\r\n      if (_engine.test instanceof Array) {\r\n        return _engine.test.some(condition => this.test(condition));\r\n      }\r\n\r\n      throw new Error(\"Browser's test function is not valid\");\r\n    });\r\n\r\n    if (engine) {\r\n      this.parsedResult.engine = engine.describe(this.getUA());\r\n    }\r\n\r\n    return this.parsedResult.engine;\r\n  }\r\n\r\n  /**\r\n   * Parse full information about the browser\r\n   * @returns {Parser}\r\n   */\r\n  parse() {\r\n    this.parseBrowser();\r\n    this.parseOS();\r\n    this.parsePlatform();\r\n    this.parseEngine();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get parsed result\r\n   * @return {ParsedResult}\r\n   */\r\n  getResult() {\r\n    return Utils.assign({}, this.parsedResult);\r\n  }\r\n\r\n  /**\r\n   * Check if parsed browser matches certain conditions\r\n   *\r\n   * @param {Object} checkTree It's one or two layered object,\r\n   * which can include a platform or an OS on the first layer\r\n   * and should have browsers specs on the bottom-laying layer\r\n   *\r\n   * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.\r\n   * Returns `undefined` when the browser is no described in the checkTree object.\r\n   *\r\n   * @example\r\n   * const browser = Bowser.getParser(window.navigator.userAgent);\r\n   * if (browser.satisfies({chrome: '>118.01.1322' }))\r\n   * // or with os\r\n   * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))\r\n   * // or with platforms\r\n   * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))\r\n   */\r\n  satisfies(checkTree) {\r\n    const platformsAndOSes = {};\r\n    let platformsAndOSCounter = 0;\r\n    const browsers = {};\r\n    let browsersCounter = 0;\r\n\r\n    const allDefinitions = Object.keys(checkTree);\r\n\r\n    allDefinitions.forEach((key) => {\r\n      const currentDefinition = checkTree[key];\r\n      if (typeof currentDefinition === 'string') {\r\n        browsers[key] = currentDefinition;\r\n        browsersCounter += 1;\r\n      } else if (typeof currentDefinition === 'object') {\r\n        platformsAndOSes[key] = currentDefinition;\r\n        platformsAndOSCounter += 1;\r\n      }\r\n    });\r\n\r\n    if (platformsAndOSCounter > 0) {\r\n      const platformsAndOSNames = Object.keys(platformsAndOSes);\r\n      const OSMatchingDefinition = Utils.find(platformsAndOSNames, name => (this.isOS(name)));\r\n\r\n      if (OSMatchingDefinition) {\r\n        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);\r\n\r\n        if (osResult !== void 0) {\r\n          return osResult;\r\n        }\r\n      }\r\n\r\n      const platformMatchingDefinition = Utils.find(\r\n        platformsAndOSNames,\r\n        name => (this.isPlatform(name)),\r\n      );\r\n      if (platformMatchingDefinition) {\r\n        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);\r\n\r\n        if (platformResult !== void 0) {\r\n          return platformResult;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (browsersCounter > 0) {\r\n      const browserNames = Object.keys(browsers);\r\n      const matchingDefinition = Utils.find(browserNames, name => (this.isBrowser(name, true)));\r\n\r\n      if (matchingDefinition !== void 0) {\r\n        return this.compareVersion(browsers[matchingDefinition]);\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Check if the browser name equals the passed string\r\n   * @param browserName The string to compare with the browser name\r\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\r\n   * @returns {boolean}\r\n   */\r\n  isBrowser(browserName, includingAlias = false) {\r\n    const defaultBrowserName = this.getBrowserName().toLowerCase();\r\n    let browserNameLower = browserName.toLowerCase();\r\n    const alias = Utils.getBrowserTypeByAlias(browserNameLower);\r\n\r\n    if (includingAlias && alias) {\r\n      browserNameLower = alias.toLowerCase();\r\n    }\r\n    return browserNameLower === defaultBrowserName;\r\n  }\r\n\r\n  compareVersion(version) {\r\n    let expectedResults = [0];\r\n    let comparableVersion = version;\r\n    let isLoose = false;\r\n\r\n    const currentBrowserVersion = this.getBrowserVersion();\r\n\r\n    if (typeof currentBrowserVersion !== 'string') {\r\n      return void 0;\r\n    }\r\n\r\n    if (version[0] === '>' || version[0] === '<') {\r\n      comparableVersion = version.substr(1);\r\n      if (version[1] === '=') {\r\n        isLoose = true;\r\n        comparableVersion = version.substr(2);\r\n      } else {\r\n        expectedResults = [];\r\n      }\r\n      if (version[0] === '>') {\r\n        expectedResults.push(1);\r\n      } else {\r\n        expectedResults.push(-1);\r\n      }\r\n    } else if (version[0] === '=') {\r\n      comparableVersion = version.substr(1);\r\n    } else if (version[0] === '~') {\r\n      isLoose = true;\r\n      comparableVersion = version.substr(1);\r\n    }\r\n\r\n    return expectedResults.indexOf(\r\n      Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose),\r\n    ) > -1;\r\n  }\r\n\r\n  isOS(osName) {\r\n    return this.getOSName(true) === String(osName).toLowerCase();\r\n  }\r\n\r\n  isPlatform(platformType) {\r\n    return this.getPlatformType(true) === String(platformType).toLowerCase();\r\n  }\r\n\r\n  isEngine(engineName) {\r\n    return this.getEngineName(true) === String(engineName).toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Is anything? Check if the browser is called \"anything\",\r\n   * the OS called \"anything\" or the platform called \"anything\"\r\n   * @param {String} anything\r\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\r\n   * @returns {Boolean}\r\n   */\r\n  is(anything, includingAlias = false) {\r\n    return this.isBrowser(anything, includingAlias) || this.isOS(anything)\r\n      || this.isPlatform(anything);\r\n  }\r\n\r\n  /**\r\n   * Check if any of the given values satisfies this.is(anything)\r\n   * @param {String[]} anythings\r\n   * @returns {Boolean}\r\n   */\r\n  some(anythings = []) {\r\n    return anythings.some(anything => this.is(anything));\r\n  }\r\n}\r\n\r\nexport default Parser;\r\n", "/*!\r\n * Bowser - a browser detector\r\n * https://github.com/lancedikson/bowser\r\n * MIT License | (c) Dustin Diaz 2012-2015\r\n * MIT License | (c) Denis Demchenko 2015-2019\r\n */\r\nimport Parser from './parser.js';\r\nimport {\r\n  BROWSER_MAP,\r\n  ENGINE_MAP,\r\n  OS_MAP,\r\n  PLATFORMS_MAP,\r\n} from './constants.js';\r\n\r\n/**\r\n * Bowser class.\r\n * Keep it simple as much as it can be.\r\n * It's supposed to work with collections of {@link Parser} instances\r\n * rather then solve one-instance problems.\r\n * All the one-instance stuff is located in Parser class.\r\n *\r\n * @class\r\n * @classdesc Bowser is a static object, that provides an API to the Parsers\r\n * @hideconstructor\r\n */\r\nclass Bowser {\r\n  /**\r\n   * Creates a {@link Parser} instance\r\n   *\r\n   * @param {String} UA UserAgent string\r\n   * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it\r\n   * explicitly. Same as `skipParsing` for {@link Parser}.\r\n   * @returns {Parser}\r\n   * @throws {Error} when UA is not a String\r\n   *\r\n   * @example\r\n   * const parser = Bowser.getParser(window.navigator.userAgent);\r\n   * const result = parser.getResult();\r\n   */\r\n  static getParser(UA, skipParsing = false) {\r\n    if (typeof UA !== 'string') {\r\n      throw new Error('UserAgent should be a string');\r\n    }\r\n    return new Parser(UA, skipParsing);\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately\r\n   *\r\n   * @param UA\r\n   * @return {ParsedResult}\r\n   *\r\n   * @example\r\n   * const result = Bowser.parse(window.navigator.userAgent);\r\n   */\r\n  static parse(UA) {\r\n    return (new Parser(UA)).getResult();\r\n  }\r\n\r\n  static get BROWSER_MAP() {\r\n    return BROWSER_MAP;\r\n  }\r\n\r\n  static get ENGINE_MAP() {\r\n    return ENGINE_MAP;\r\n  }\r\n\r\n  static get OS_MAP() {\r\n    return OS_MAP;\r\n  }\r\n\r\n  static get PLATFORMS_MAP() {\r\n    return PLATFORMS_MAP;\r\n  }\r\n}\r\n\r\nexport default Bowser;\r\n", "import d from \"./node_modules/bowser/src/bowser.js\";export default d;"],
  "mappings": "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",
  "names": ["bowser_default"]
}
