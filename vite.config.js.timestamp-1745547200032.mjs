// vite.config.js
import {
  defineConfig
} from "vite";
import vue from "@vitejs/plugin-vue";
import path from "path";
import Icons from "unplugin-icons/vite";
import IconsResolver from "unplugin-icons/resolver";
import AutoImport from "unplugin-auto-import/vite";
import Components from "unplugin-vue-components/vite";
import {
  ElementPlusResolver
} from "unplugin-vue-components/resolvers";
import DynamicImport from "vite-plugin-dynamic-import";
import viteImagemin from "vite-plugin-imagemin";
var __vite_injected_original_dirname = "D:\\project\\Levi-Blog";
var pathSrc = path.resolve(__vite_injected_original_dirname, "src");
var vite_config_default = defineConfig({
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag) => tag.startsWith("wc-")
        }
      }
    }),
    viteImagemin({
      webp: {
        quality: 60
      }
    }),
    DynamicImport(),
    AutoImport({
      imports: ["vue"],
      resolvers: [
        ElementPlusResolver(),
        IconsResolver({
          prefix: "Icon"
        })
      ],
      dts: path.resolve(pathSrc, "auto-imports.d.ts")
    }),
    Components({
      resolvers: [
        IconsResolver({
          enabledCollections: ["ep"]
        }),
        ElementPlusResolver()
      ],
      dts: path.resolve(pathSrc, "components.d.ts")
    }),
    Icons({
      autoInstall: true
    })
  ],
  resolve: {
    alias: {
      "@": pathSrc
    }
  },
  server: {
    host: "localhost",
    https: false,
    cors: true,
    open: true,
    port: "9527",
    strictPort: false,
    hmr: true,
    usePolling: true
  },
  build: {
    brotliSize: false,
    outDir: "dist",
    cssCodeSplit: false,
    chunkSizeWarningLimit: 1e3,
    sourcemap: false,
    manifest: true,
    assetsDir: "static/img/",
    emptyOutDir: true,
    rollupOptions: {
      output: {
        chunkFileNames: "static/js/[name].[hash].js",
        entryFileNames: "static/js/[name].[hash].js",
        assetFileNames: "static/[ext]/[name].[hash].[ext]",
        manualChunks: void 0,
        dynamicImportFunction: "import"
      }
    },
    minify: "esbuild"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
